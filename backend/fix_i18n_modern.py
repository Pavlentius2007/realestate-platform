"""
üåç –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è FastAPI –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON
–ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ gettext –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import json
import os
from pathlib import Path
from fastapi import Request
from typing import Dict, Any, Optional
import threading
import time
from collections import OrderedDict
from backend.config.i18n import (
    SUPPORTED_LANGUAGES,
    DEFAULT_LANGUAGE,
    LANGUAGE_COOKIE_NAME,
    LANGUAGE_COOKIE_MAX_AGE,
    LANGUAGE_SESSION_KEY,
    LANGUAGE_DETECTION_ORDER
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CURRENT_FILE = Path(__file__).resolve()
if CURRENT_FILE.parent.name == "backend":
    # –ó–∞–ø—É—Å–∫ –∏–∑ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ backend
    BASE_DIR = CURRENT_FILE.parent.parent  # realestate-platform
else:
    # –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    BASE_DIR = CURRENT_FILE.parent  # realestate-platform

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ locales –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
LOCALES_DIR = BASE_DIR / "locales"
if not LOCALES_DIR.exists():
    print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {LOCALES_DIR}")
    print(f"üìÅ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {LOCALES_DIR}")
    LOCALES_DIR.mkdir(exist_ok=True)

class LRUCache:
    """–ö—ç—à —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–µ–π"""
    def __init__(self, capacity: int = 1000, ttl: int = 3600):
        self.cache = OrderedDict()
        self.capacity = capacity
        self.ttl = ttl
        self.timestamps = {}
        self._lock = threading.Lock()
        
    def get(self, key: str) -> Optional[str]:
        with self._lock:
            if key not in self.cache:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if time.time() - self.timestamps[key] > self.ttl:
                del self.cache[key]
                del self.timestamps[key]
                return None
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ LRU
            self.cache.move_to_end(key)
            return self.cache[key]
        
    def put(self, key: str, value: str):
        with self._lock:
            if key in self.cache:
                self.cache.move_to_end(key)
            self.cache[key] = value
            self.timestamps[key] = time.time()
            
            if len(self.cache) > self.capacity:
                self.cache.popitem(last=False)
                
    def clear(self):
        with self._lock:
            self.cache.clear()
            self.timestamps.clear()
        
    def __contains__(self, key: str) -> bool:
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ in"""
        with self._lock:
            return key in self.cache and time.time() - self.timestamps[key] <= self.ttl

class ModernI18n:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON"""
    
    def __init__(self):
        self.translations: Dict[str, Dict[str, str]] = {}
        self.cache = LRUCache(capacity=10000, ttl=3600)
        self._lock = threading.Lock()
        self.load_translations()
        
    def load_translations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        self.cache.clear()
        print("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")
        print(f"üîç –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤: {LOCALES_DIR}")
        with self._lock:
            for lang in SUPPORTED_LANGUAGES:
                json_file = LOCALES_DIR / f"{lang}.json"
                try:
                    if json_file.exists():
                        with open(json_file, 'r', encoding='utf-8') as f:
                            translations = json.load(f)
                            self.translations[lang] = translations
                            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ {lang}")
                    else:
                        print(f"‚ö†Ô∏è –§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è {lang}: {e}")
            if not any(self.translations.values()):
                print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞!")
                print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ .json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {LOCALES_DIR}")
            else:
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —è–∑—ã–∫–æ–≤: {list(self.translations.keys())}")
    
    def parse_accept_language(self, header: str):
        """
        –ü–∞—Ä—Å–∏—Ç Accept-Language –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Å —É—á–µ—Ç–æ–º q-values)
        """
        langs = []
        if not header:
            return []
        parts = [h.strip() for h in header.split(',') if h.strip()]
        for part in parts:
            if ';' in part:
                lang, qval = part.split(';', 1)
                try:
                    q = float(qval.split('=')[1])
                except Exception:
                    q = 1.0
            else:
                lang = part
                q = 1.0
            lang = lang.lower().replace('_', '-')
            langs.append((q, lang))
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫ —Å —á—É—Ç—å –º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            if '-' in lang:
                base = lang.split('-')[0]
                langs.append((q - 0.001, base))
        langs.sort(reverse=True)
        return [l[1] for l in langs]

    def get_user_language(self, request: Request) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for priority in LANGUAGE_DETECTION_ORDER:
            if priority == 'url':
                path = str(request.url.path)
                if path.startswith('/'):
                    parts = path.strip('/').split('/')
                    if parts and parts[0] in SUPPORTED_LANGUAGES:
                        print(f"üåç –Ø–∑—ã–∫ –∏–∑ URL: {parts[0]}")
                        return parts[0]
            elif priority == 'session':
                try:
                    if hasattr(request, 'session') and request.session:
                        session_lang = request.session.get(LANGUAGE_SESSION_KEY)
                        if session_lang and session_lang in SUPPORTED_LANGUAGES:
                            print(f"üåç –Ø–∑—ã–∫ –∏–∑ —Å–µ—Å—Å–∏–∏: {session_lang}")
                            return session_lang
                except Exception as e:
                    print(f"üåç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏: {e}")
            elif priority == 'cookie':
                try:
                    cookie_lang = request.cookies.get(LANGUAGE_COOKIE_NAME)
                    if cookie_lang and cookie_lang in SUPPORTED_LANGUAGES:
                        print(f"üåç –Ø–∑—ã–∫ –∏–∑ cookie: {cookie_lang}")
                        return cookie_lang
                except Exception as e:
                    print(f"üåç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ cookie: {e}")
            elif priority == 'header':
                try:
                    accept_lang = request.headers.get("accept-language", "")
                    for code in self.parse_accept_language(accept_lang):
                        if code in SUPPORTED_LANGUAGES:
                            print(f"üåç –Ø–∑—ã–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {code}")
                            return code
                except Exception as e:
                    print(f"üåç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        print(f"üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_LANGUAGE}")
        return DEFAULT_LANGUAGE
    
    def translate(self, key: str, lang: str, **kwargs) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–ª—é—á –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{lang}:{key}"
        cached = self.cache.get(cache_key)
        if cached:
            return cached.format(**kwargs) if kwargs else cached
            
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ
        translation = None
        
        def get_nested_value(data: dict, nested_key: str):
            """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'site.title')"""
            keys = nested_key.split('.')
            current = data
            for k in keys:
                if isinstance(current, dict) and k in current:
                    current = current[k]
                else:
                    return None
            return current if not isinstance(current, dict) else None

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥
        if lang in self.translations:
            translation = get_nested_value(self.translations[lang], key)
            
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –∫–ª—é—á), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if translation is None and key not in ['lang', 'request'] and not key.startswith('_'):
            translation = key
            
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        if translation is None and lang != 'en' and 'en' in self.translations:
            translation = get_nested_value(self.translations['en'], key)
            if translation:
                print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {key} (—è–∑—ã–∫: {lang})")
        
        if translation:
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache.put(cache_key, translation)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            return translation.format(**kwargs) if kwargs else translation
            
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
        print(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {key} (—è–∑—ã–∫: {lang})")
        return key

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
i18n = ModernI18n()

def reload_translations():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ runtime"""
    i18n.load_translations()
    print("üîÑ –ü–µ—Ä–µ–≤–æ–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

def create_translator(request: Request):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    lang = i18n.get_user_language(request)
    
    def _(key: str, **kwargs) -> str:
        result = i18n.translate(key, lang, **kwargs)
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç
        if result == key and key not in ['lang', 'request']:
            # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
            return key
        return result
    
    return _, lang


# Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from fastapi.templating import Jinja2Templates
from starlette.responses import Response

class ModernI18nMiddleware(BaseHTTPMiddleware):
    """–ï–¥–∏–Ω—ã–π middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏"""
    
    def __init__(self, app, templates: Optional[Jinja2Templates] = None):
        super().__init__(app)
        self.templates = templates
        
    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã, API –∑–∞–ø—Ä–æ—Å—ã –∏ –º–∞—Ä—à—Ä—É—Ç —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
            path = request.url.path
            if (path.startswith("/static/") or 
                path.startswith("/api/") or 
                path.startswith("/admin") or
                path.startswith("/favicon.ico") or
                path.startswith("/robots.txt") or
                path.startswith("/lang/")):
                response = await call_next(request)
                return response

            lang = i18n.get_user_language(request)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
            def _(key: str, **kwargs) -> str:
                return i18n.translate(key, lang, **kwargs)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ scope –∑–∞–ø—Ä–æ—Å–∞
            request.scope["_"] = _
            request.scope["translate"] = _
            request.scope["lang"] = lang
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω—ã
            if self.templates:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                try:
                    from backend.utils.config_utils import get_config_for_template, get_analytics_scripts
                except ImportError:
                    try:
                        from utils.config_utils import get_config_for_template, get_analytics_scripts
                    except ImportError:
                        # Fallback –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                        def get_config_for_template():
                            return {"seo": {"site_title": "Sianoro"}}
                        def get_analytics_scripts() -> str:
                            return ""
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = get_config_for_template()
                analytics_scripts = get_analytics_scripts()
                
                self.templates.env.globals.update({
                    "_": _,
                    "translate": _,
                    "lang": lang,
                    "supported_languages": SUPPORTED_LANGUAGES,
                    "config": config,
                    "analytics_scripts": analytics_scripts
                })
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–¥–º–∏–Ω–∫–æ–π
            try:
                from backend.config.templates import templates as admin_templates
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ config –∏ analytics_scripts –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
                if 'config' not in locals():
                    try:
                        from backend.utils.config_utils import get_config_for_template, get_analytics_scripts
                    except ImportError:
                        def get_config_for_template():
                            return {"seo": {"site_title": "Sianoro"}}
                        def get_analytics_scripts() -> str:
                            return ""
                    config = get_config_for_template()
                    analytics_scripts = get_analytics_scripts()
                
                admin_templates.env.globals.update({
                    "_": _,
                    "translate": _,
                    "lang": lang,
                    "supported_languages": SUPPORTED_LANGUAGES,
                    "config": config,
                    "analytics_scripts": analytics_scripts
                })
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤: {e}")
                pass
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            path_parts = path.strip('/').split('/')

            # –ù–ï –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
            if path.startswith('/lang/'):
                response = await call_next(request)
                return response

            if not path_parts or path_parts[0] not in SUPPORTED_LANGUAGES:
                from starlette.responses import RedirectResponse
                return RedirectResponse(f"/{lang}{path}", status_code=302)
                
            response = await call_next(request)
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ModernI18nMiddleware: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
            return await call_next(request)


def inject_translator_to_templates(templates: Jinja2Templates, request: Request):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –≤ —à–∞–±–ª–æ–Ω—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)"""
    if not hasattr(request.state, '_') or not hasattr(request.state, 'lang'):
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        lang = request.path_params.get('lang', 'ru')
        request.state.lang = lang
        
        def _(key: str, **kwargs) -> str:
            result = i18n.translate(key, lang, **kwargs)
            print(f"üî§ –ü–µ—Ä–µ–≤–æ–¥ (–∏–Ω–∂–µ–∫—Ü–∏—è): {key} -> {result} (—è–∑—ã–∫: {lang})")
            return result
            
        request.state._ = _
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        from backend.utils.config_utils import get_config_for_template, get_analytics_scripts
    except ImportError:
        try:
            from utils.config_utils import get_config_for_template, get_analytics_scripts
        except ImportError:
            # Fallback –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            def get_config_for_template():
                return {"seo": {"site_title": "Sianoro"}}
            def get_analytics_scripts() -> str:
                return ""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_config_for_template()
    analytics_scripts = get_analytics_scripts()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤
    templates.env.globals.update({
        "_": request.state._,
        "lang": request.state.lang,
        "translate": request.state._,
        "config": config,
        "analytics_scripts": analytics_scripts
    })
    return True 