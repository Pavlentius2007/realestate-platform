from fastapi import FastAPI, Request, HTTPException, Depends, Form, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse
from starlette.templating import Jinja2Templates
from starlette.middleware.sessions import SessionMiddleware
from pathlib import Path
from fastapi.staticfiles import StaticFiles
from datetime import datetime
from typing import Optional, List
from urllib.parse import urlparse, urlunparse
import json
import os

try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å backend. (–∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –∫–æ—Ä–Ω—è)
    from backend.database import engine, Base, SessionLocal, get_db
    from backend.routers import admin, user_tools, stats, projects, submit_property, rental_request, favorites, submit_rent, analytics, crm
    from backend.routers.articles import router as articles_router
    from backend.routers.properties import router as properties_router
    from backend.routers.auto_translation import router as auto_translation_router
    from backend.models.property import Property
    from backend.models.property_image import PropertyImage
    from backend.config.settings import settings
    from backend.utils.config_utils import get_config_for_template, get_analytics_scripts
except ImportError:
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ backend/)
    from database import engine, Base, SessionLocal, get_db
    from routers import admin, user_tools, stats, projects, submit_property, rental_request, favorites, submit_rent, analytics, crm
    from routers.articles import router as articles_router
    from routers.properties import router as properties_router
    from routers.auto_translation import router as auto_translation_router
    from models.property import Property
    from models.property_image import PropertyImage
    from config.settings import settings
    from utils.config_utils import get_config_for_template, get_analytics_scripts
from sqlalchemy.orm import Session, joinedload
import markdown
import frontmatter
try:
    from backend.config.i18n import SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, LANGUAGE_COOKIE_NAME
    from backend.config.templates import templates
    from backend.fix_i18n_modern import ModernI18n, ModernI18nMiddleware, i18n
except ImportError:
    from config.i18n import SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, LANGUAGE_COOKIE_NAME
    from config.templates import templates
    from fix_i18n_modern import ModernI18n, ModernI18nMiddleware, i18n

# üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —à–∞–±–ª–æ–Ω—ã
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CURRENT_FILE = Path(__file__).resolve()
if CURRENT_FILE.parent.name == "backend":
    # –ó–∞–ø—É—Å–∫ –∏–∑ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    BASE_DIR = CURRENT_FILE.parent.parent  # realestate-platform
else:
    # –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    BASE_DIR = CURRENT_FILE.parent  # realestate-platform

TEMPLATES_DIR = BASE_DIR / "backend" / "templates"
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))
templates.env.globals["supported_languages"] = SUPPORTED_LANGUAGES
templates.env.globals['now'] = datetime.now

# üåç –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18n
try:
    from backend.config.i18n import (
        LANGUAGE_COOKIE_MAX_AGE,
        LANGUAGE_SESSION_KEY
    )
except ImportError:
    from config.i18n import (
        LANGUAGE_COOKIE_MAX_AGE,
        LANGUAGE_SESSION_KEY
    )

def inject_translator_to_templates(templates: Jinja2Templates, request: Request):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —à–∞–±–ª–æ–Ω—ã"""
    lang = i18n.get_user_language(request)
    
    def _(key: str, **kwargs) -> str:
        return i18n.translate(key, lang, **kwargs)
    
    templates.env.globals['_'] = _
    templates.env.globals['lang'] = lang
    templates.env.globals['supported_languages'] = SUPPORTED_LANGUAGES
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è white label
    config = get_config_for_template()
    templates.env.globals['config'] = config
    templates.env.globals['analytics_scripts'] = get_analytics_scripts()

# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(debug=True)

# üõ° Middleware - –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
# 1. SessionMiddleware –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
app.add_middleware(
    SessionMiddleware,
    secret_key="super-sianoro-key",
    max_age=LANGUAGE_COOKIE_MAX_AGE,
    same_site="lax",
    https_only=False
)

# 2. CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 3. ModernI18nMiddleware - –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
app.add_middleware(ModernI18nMiddleware, templates=templates)

# üîº –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")
app.mount("/css", StaticFiles(directory=str(BASE_DIR / "static" / "css")), name="css")
app.mount("/js", StaticFiles(directory=str(BASE_DIR / "static" / "js")), name="js")
app.mount("/images", StaticFiles(directory=str(BASE_DIR / "static" / "images")), name="images")
app.mount("/locales", StaticFiles(directory=str(BASE_DIR / "locales")), name="locales")

# üåç –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
i18n.load_translations()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# üåç –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–ï–î –í–°–ï–ú–ò –†–û–£–¢–ï–†–ê–ú–ò!
@app.get("/lang/{lang_code}")
async def switch_language(request: Request, lang_code: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Å–µ—Å—Å–∏–∏ –∏ cookie"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if lang_code not in SUPPORTED_LANGUAGES:
        raise HTTPException(
            status_code=400, 
            detail=f"Unsupported language. Supported: {', '.join(SUPPORTED_LANGUAGES.keys())}"
        )
    
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
    try:
        request.session[LANGUAGE_SESSION_KEY] = lang_code
        print(f"üåç set_language_in_session: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫ {lang_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏: {e}")
    
    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    referer = request.headers.get("referer")
    if not referer:
        return RedirectResponse(f"/{lang_code}", status_code=302)
    
    # –ü–∞—Ä—Å–∏–º referer URL —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
    parsed = urlparse(referer)
    path_parts = parsed.path.strip('/').split('/')
    
    # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –∫–æ–¥ —è–∑—ã–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
    if path_parts and path_parts[0] in SUPPORTED_LANGUAGES:
        path_parts[0] = lang_code
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫–∞ –Ω–µ—Ç –≤ –ø—É—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º
        path_parts.insert(0, lang_code)
    
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π URL —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    new_path = '/' + '/'.join(path_parts)
    new_url = urlunparse(parsed._replace(path=new_path))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å
    is_ajax = request.headers.get("X-Requested-With") == "XMLHttpRequest"
    if is_ajax:
        return {"success": True, "redirect_url": new_url}
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookie
    response = RedirectResponse(url=new_url, status_code=302)
    response.set_cookie(
        key=LANGUAGE_COOKIE_NAME,
        value=lang_code,
        max_age=LANGUAGE_COOKIE_MAX_AGE,
        httponly=True,
        samesite="lax",
        secure=request.url.scheme == "https"
    )
    
    return response

# üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(admin.router)
app.include_router(analytics.router)
app.include_router(crm.router)
app.include_router(auto_translation_router, prefix="/api/translate", tags=["Auto Translation"])
app.include_router(rental_request.router)
app.include_router(submit_property.router)
app.include_router(submit_rent.router)
app.include_router(user_tools.router)
app.include_router(stats.router, prefix="/stats", tags=["Stats"])
app.include_router(properties_router, prefix="/{lang}/properties", tags=["Properties"])
app.include_router(projects.router, prefix="/{lang}")
app.include_router(favorites.router, prefix="/{lang}", tags=["Favorites"])
app.include_router(articles_router, prefix="/{lang}", tags=["Articles"])

# üìÑ –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
@app.get("/{lang}")
async def home(request: Request, lang: str):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}{request.url.path}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    inject_translator_to_templates(templates, request)
    
    return templates.TemplateResponse("landing.html", {"request": request})

@app.get("/{lang}/rent", response_class=HTMLResponse)
async def rent(request: Request, lang: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—Ä–µ–Ω–¥—ã"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/rent")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    inject_translator_to_templates(templates, request)
    
    return templates.TemplateResponse("rent.html", {"request": request})

@app.get("/{lang}/about", response_class=HTMLResponse)
def about(request: Request, lang: str):
    """–û –Ω–∞—Å"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/about")
    return templates.TemplateResponse("about.html", {"request": request})

@app.get("/{lang}/contacts", response_class=HTMLResponse)
def contacts_page(request: Request, lang: str):
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/contacts")
    return templates.TemplateResponse("contacts.html", {"request": request})

@app.get("/{lang}/privacy", response_class=HTMLResponse)
def privacy_policy(request: Request, lang: str):
    """–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/privacy")
    return templates.TemplateResponse("legal/privacy.html", {"request": request})

@app.get("/{lang}/terms", response_class=HTMLResponse)
def terms_of_service(request: Request, lang: str):
    """–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/terms")
    return templates.TemplateResponse("legal/terms.html", {"request": request})

@app.get("/{lang}/ai-search", response_class=HTMLResponse)
def ai_search(request: Request, lang: str):
    """AI –ø–æ–∏—Å–∫"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/ai-search")
    return templates.TemplateResponse("ai_search.html", {"request": request})

@app.get("/{lang}/ai-chat", response_class=HTMLResponse)
def ai_chat_page(request: Request, lang: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–º–Ω–æ–≥–æ –ò–ò-—á–∞—Ç–∞"""
    if lang not in SUPPORTED_LANGUAGES:
        return RedirectResponse(url=f"/{DEFAULT_LANGUAGE}/ai-chat")
    return templates.TemplateResponse("ai_chat.html", {"request": request})

@app.post("/{lang}/ai-chat")
def ai_chat_api(request: Request, lang: str, 
                message: str = Form(...),
                session_id: str = Form(None)):
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò-—á–∞—Ç–∞"""
    try:
        from services.ai_assistant import RealEstateAIAssistant
        from database import SessionLocal
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db = SessionLocal()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞
            ai_assistant = RealEstateAIAssistant(db)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            ai_response, found_properties, session_id = ai_assistant.process_message(
                message, session_id
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            properties_data = []
            for prop in found_properties:
                properties_data.append({
                    "id": prop.id,
                    "title": prop.title,
                    "price": prop.price,
                    "area": prop.area,
                    "bedrooms": prop.bedrooms,
                    "district": prop.district,
                    "location": prop.location,
                    "preview_image": prop.preview_image
                })
            
            return {
                "success": True,
                "response": ai_response,
                "properties": properties_data,
                "session_id": session_id
            }
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ò–ò-—á–∞—Ç–µ: {e}")
        return {
            "success": False,
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º.",
            "properties": [],
            "session_id": session_id
        }

# üè¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä–µ–∫—Ç–∞
@app.get("/{lang}/properties/{property_id}", response_class=HTMLResponse)
def property_detail(request: Request, lang: str, property_id: int, db: Session = Depends(get_db)):
    # –Ø–∑—ã–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ModernI18nMiddleware
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    inject_translator_to_templates(templates, request)
    
    try:
        property = db.query(Property).options(joinedload(Property.images)).filter(Property.id == property_id).first()
        if not property:
            raise HTTPException(status_code=404, detail="Property not found")

        related_properties = db.query(Property).filter(
            Property.district == property.district,
            Property.id != property.id
        ).limit(4).all()

        return templates.TemplateResponse("property_detail.html", {
            "request": request,
            "property": property,
            "related_properties": related_properties,
            "lang": lang
        })
    except Exception:
        import traceback
        traceback.print_exc()
        return HTMLResponse(content="–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞", status_code=500)

# üîç –ü–æ–∏—Å–∫
@app.get("/{lang}/search", response_class=HTMLResponse)
def search(request: Request, lang: str, q: str = "", property_type: str = ""):
    # –Ø–∑—ã–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ModernI18nMiddleware
    
    db = SessionLocal()
    query = db.query(Property)
    if q:
        query = query.filter(Property.title.ilike(f"%{q}%") | Property.description.ilike(f"%{q}%"))
    if property_type:
        query = query.filter(Property.type.ilike(f"%{property_type}%"))
    results = query.all()
    db.close()
    return templates.TemplateResponse("search_results.html", {
        "request": request, "results": results, "query": q, "property_type": property_type,
        "lang": lang
    })

@app.get("/{lang}/repair", response_class=HTMLResponse)
def repair_page(request: Request, lang: str):
    # –Ø–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ ModernI18nMiddleware!
    return templates.TemplateResponse("repair.html", {"request": request, "lang": lang})

# üõ† –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# üîó –ö–æ—Ä–Ω–µ–≤—ã–µ —Ä–æ—É—Ç—ã –±–µ–∑ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
@app.get("/", response_class=HTMLResponse)
async def root_home(request: Request):
    return RedirectResponse(url="/ru", status_code=302)

@app.get("/new-builds-catalog", response_class=HTMLResponse)
async def root_new_builds(request: Request):
    return RedirectResponse(url="/ru/properties/new-builds", status_code=302)

@app.get("/projects-catalog", response_class=HTMLResponse)
async def root_projects_catalog(request: Request):
    return RedirectResponse(url="/ru/projects", status_code=302)

@app.get("/projects/{project_slug}", response_class=HTMLResponse)
async def root_project_detail(request: Request, project_slug: str):
    return RedirectResponse(url=f"/ru/projects/{project_slug}", status_code=302)

@app.post("/{lang}/ai-search", response_class=HTMLResponse)
def ai_search_post(request: Request, lang: str,
    budget: int = Form(None),
    area_from: int = Form(None),
    area_to: int = Form(None),
    district: str = Form(""),
    property_type: str = Form(""),
    bedrooms: str = Form(""),
    floor: str = Form(""),
    furnished: str = Form(""),
    view: str = Form(""),
    level: str = Form(""),
    pets: str = Form(""),
    pool: str = Form(""),
    new_or_secondary: str = Form(""),
    purpose: str = Form(""),
    infra_school: str = Form(""),
    infra_beach: str = Form(""),
    infra_mall: str = Form(""),
    infra_market: str = Form(""),
    infra_hospital: str = Form(""),
    infra_gym: str = Form(""),
):
    # –Ø–∑—ã–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ModernI18nMiddleware
    db = SessionLocal()
    query = db.query(Property)
    if budget:
        query = query.filter(Property.price <= budget)
    if area_from:
        query = query.filter(Property.area >= area_from)
    if area_to:
        query = query.filter(Property.area <= area_to)
    if district:
        query = query.filter(Property.district == district)
    if property_type:
        query = query.filter(Property.property_type == property_type)
    if bedrooms:
        try:
            min_bed = int(bedrooms[0])
            query = query.filter(Property.bedrooms >= min_bed)
        except:
            pass
    if furnished:
        query = query.filter(Property.furnished == furnished)
    if view:
        query = query.filter(Property.description.ilike(f"%{view}%"))
    if level:
        query = query.filter(Property.status == level)
    if pets == "–î–∞":
        query = query.filter(Property.pets_allowed == True)
    if pets == "–ù–µ—Ç":
        query = query.filter(Property.pets_allowed == False)
    if pool == "–° –±–∞—Å—Å–µ–π–Ω–æ–º":
        query = query.filter(Property.features.any("–±–∞—Å—Å–µ–π–Ω"))
    if pool == "–ë–µ–∑ –±–∞—Å—Å–µ–π–Ω–∞":
        query = query.filter(~Property.features.any("–±–∞—Å—Å–µ–π–Ω"))
    if new_or_secondary == "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞":
        query = query.filter(Property.property_type == "new")
    if new_or_secondary == "–í—Ç–æ—Ä–∏—á–∫–∞":
        query = query.filter(Property.property_type != "new")
    # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø—Ä–∏–º–µ—Ä: –∏—â–µ–º –ø–æ description)
    infra_keywords = []
    if infra_school: infra_keywords.append("—à–∫–æ–ª–∞")
    if infra_beach: infra_keywords.append("–ø–ª—è–∂")
    if infra_mall: infra_keywords.append("–¢–¶")
    if infra_market: infra_keywords.append("—Ä—ã–Ω–æ–∫")
    if infra_hospital: infra_keywords.append("–≥–æ—Å–ø–∏—Ç–∞–ª—å")
    if infra_gym: infra_keywords.append("—Å–ø–æ—Ä—Ç–∑–∞–ª")
    for kw in infra_keywords:
        query = query.filter(Property.description.ilike(f"%{kw}%"))
    results = query.all()
    db.close()
    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ middleware!
    explanation = "–ò–ò-–ø–æ–¥–±–æ—Ä: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!"
    return templates.TemplateResponse("ai_search.html", {
        "request": request,
        "lang": lang,
        "results": results,
        "explanation": explanation
    })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏
def get_session_language(request: Request) -> Optional[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–∑ —Å–µ—Å—Å–∏–∏"""
    try:
        if hasattr(request, 'session'):
            return request.session.get(LANGUAGE_SESSION_KEY)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏: {e}")
    return None

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
def get_preferred_language(request: Request) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
    path = str(request.url.path)
    if path.startswith('/'):
        parts = path.strip('/').split('/')
        if parts and parts[0] in SUPPORTED_LANGUAGES:
            return parts[0]
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    session_lang = get_session_language(request)
    if session_lang and session_lang in SUPPORTED_LANGUAGES:
        return session_lang
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie
    cookie_lang = request.cookies.get(LANGUAGE_COOKIE_NAME)
    if cookie_lang and cookie_lang in SUPPORTED_LANGUAGES:
        return cookie_lang
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Accept-Language
    accept_lang = request.headers.get("accept-language", "")
    if accept_lang:
        langs = accept_lang.split(",")
        for lang in langs:
            code = lang.split(";")[0].strip().lower()[:2]
            if code in SUPPORTED_LANGUAGES:
                return code
    
    return DEFAULT_LANGUAGE

@app.middleware("http")
async def add_ajax_header(request: Request, call_next):
    response = await call_next(request)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å AJAX
    is_ajax = request.headers.get("X-Requested-With") == "XMLHttpRequest"
    
    # –î–ª—è AJAX-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
    if is_ajax and isinstance(response, Response):
        response.headers["X-Is-Ajax"] = "true"
    
    return response

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    import socket
    
    def find_free_port(start_port=8002):
        """Find a free port starting from the given port"""
        port = start_port
        while port < start_port + 10:  # Try 10 ports
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('127.0.0.1', port))
                    return port
            except OSError:
                port += 1
        raise RuntimeError("Could not find a free port")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        from database import create_tables
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î...")
        create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        port = find_free_port()
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Sianoro...")
        print(f"üìç –°–∞–π—Ç: http://localhost:{port}/ru")
        print(f"ü§ñ –ò–ò-–ß–∞—Ç: http://localhost:{port}/ru/ai-chat")
        print(f"üìç –ê–¥–º–∏–Ω–∫–∞: http://localhost:{port}/admin")
        print(f"üèóÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É: http://localhost:{port}/admin/add-project")
        uvicorn.run(app, host="127.0.0.1", port=port)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# üëâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ /{lang}/admin: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –∞–¥–º–∏–Ω–∫—É –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

from fastapi import Depends  # –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ

@app.get("/{lang}/admin", response_class=HTMLResponse)
def admin_page_lang(request: Request, lang: str, db: Session = Depends(get_db)):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–¥–º–∏–Ω–∫—É –ø–æ –∞–¥—Ä–µ—Å—É /{lang}/admin, –±–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤ —à–∞–±–ª–æ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–¥–º–∏–Ω–∫–æ–π
    try:
        from backend.config.templates import templates as admin_templates
    except ImportError:
        from config.templates import templates as admin_templates
    inject_translator_to_templates(admin_templates, request)

    # –ê–¥–º–∏–Ω–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º
    # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
    return admin.admin_page(request, db)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞–¥–º–∏–Ω–∫–∏ —Å —è–∑—ã–∫–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
@app.get("/{lang}/admin/{rest_path:path}")
async def admin_subpath_redirect(lang: str, rest_path: str):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç /{lang}/admin/... –Ω–∞ /admin/... —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 404."""
    target = f"/admin/{rest_path}"
    return RedirectResponse(url=target, status_code=302)

@app.get("/{lang}/static/{path:path}")
async def static_with_lang(lang: str, path: str):
    # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å —Å—Ç–∞—Ç–∏–∫–∏ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
    from starlette.responses import RedirectResponse
    return RedirectResponse(url=f"/static/{path}", status_code=307)
