# üõ°Ô∏è backend/middleware/csrf.py
"""
CSRF (Cross-Site Request Forgery) Protection Middleware
"""

import secrets
import hmac
import hashlib
from typing import List, Optional
from fastapi import Request, Response, HTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse
import time

class CSRFProtection:
    """CSRF Protection –∫–ª–∞—Å—Å"""
    
    def __init__(self, secret_key: str):
        self.secret_key = secret_key.encode()
        self.token_expiry = 3600  # 1 —á–∞—Å
    
    def generate_token(self, session_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSRF —Ç–æ–∫–µ–Ω"""
        timestamp = str(int(time.time()))
        message = f"{session_id}:{timestamp}"
        
        # –°–æ–∑–¥–∞–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
        signature = hmac.new(
            self.secret_key,
            message.encode(),
            hashlib.sha256
        ).hexdigest()
        
        return f"{message}:{signature}"
    
    def validate_token(self, token: str, session_id: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç CSRF —Ç–æ–∫–µ–Ω"""
        if not token:
            return False
        
        try:
            parts = token.split(':')
            if len(parts) != 3:
                return False
            
            token_session_id, timestamp, signature = parts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º session_id
            if token_session_id != session_id:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
            token_time = int(timestamp)
            if int(time.time()) - token_time > self.token_expiry:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
            expected_message = f"{token_session_id}:{timestamp}"
            expected_signature = hmac.new(
                self.secret_key,
                expected_message.encode(),
                hashlib.sha256
            ).hexdigest()
            
            return hmac.compare_digest(signature, expected_signature)
            
        except (ValueError, TypeError):
            return False

class CSRFMiddleware(BaseHTTPMiddleware):
    """CSRF Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    def __init__(self, app, secret_key: str, exempt_paths: Optional[List[str]] = None):
        super().__init__(app)
        self.csrf = CSRFProtection(secret_key)
        self.exempt_paths = exempt_paths or []
        
        # –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.default_exempt_paths = [
            "/api/auth/login",
            "/api/auth/register", 
            "/api/auth/refresh",
            "/static/",
            "/css/",
            "/js/",
            "/images/",
            "/locales/",
            "/docs",
            "/openapi.json",
            "/lang/",
            "/favicon.ico"
        ]
    
    async def dispatch(self, request: Request, call_next):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ CSRF –∑–∞—â–∏—Ç–∞
        if not self._requires_csrf_protection(request):
            response = await call_next(request)
            return response
        
        # –ü–æ–ª—É—á–∞–µ–º session_id (—Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç)
        session_id = request.session.get("session_id")
        if not session_id:
            session_id = secrets.token_urlsafe(32)
            request.session["session_id"] = session_id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.method == "GET":
            csrf_token = self.csrf.generate_token(session_id)
            request.state.csrf_token = csrf_token
            
            response = await call_next(request)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookie
            if hasattr(response, 'set_cookie'):
                response.set_cookie(
                    key="csrf_token",
                    value=csrf_token,
                    httponly=True,
                    samesite="strict",
                    secure=request.url.scheme == "https",
                    max_age=3600
                )
            
            return response
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è POST/PUT/DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.method in ["POST", "PUT", "DELETE", "PATCH"]:
            csrf_token = self._get_csrf_token(request)
            
            if not csrf_token or not self.csrf.validate_token(csrf_token, session_id):
                return JSONResponse(
                    status_code=403,
                    content={"detail": "CSRF token missing or invalid"}
                )
        
        response = await call_next(request)
        return response
    
    def _requires_csrf_protection(self, request: Request) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ CSRF –∑–∞—â–∏—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
        path = request.url.path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º exempt paths
        all_exempt_paths = self.exempt_paths + self.default_exempt_paths
        
        for exempt_path in all_exempt_paths:
            if path.startswith(exempt_path):
                return False
        
        # API endpoints —Ç—Ä–µ–±—É—é—Ç –∑–∞—â–∏—Ç—ã (–∫—Ä–æ–º–µ auth)
        if path.startswith("/api/"):
            return True
            
        # –§–æ—Ä–º—ã —Ç—Ä–µ–±—É—é—Ç –∑–∞—â–∏—Ç—ã
        if request.method in ["POST", "PUT", "DELETE", "PATCH"]:
            return True
        
        return False
    
    def _get_csrf_token(self, request: Request) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-CSRF-Token
        token = request.headers.get("X-CSRF-Token")
        if token:
            return token
        
        # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º cookie
        token = request.cookies.get("csrf_token")
        if token:
            return token
            
        # –ù–∞–∫–æ–Ω–µ—Ü, –ø—Ä–æ–≤–µ—Ä—è–µ–º form data
        if hasattr(request, '_form') and request._form:
            return request._form.get("csrf_token")
        
        return None

# üîß Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
def get_csrf_token(request: Request) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
    return getattr(request.state, 'csrf_token', '')

def csrf_token_input(request: Request) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML input –¥–ª—è CSRF —Ç–æ–∫–µ–Ω–∞"""
    token = get_csrf_token(request)
    return f'<input type="hidden" name="csrf_token" value="{token}">' 