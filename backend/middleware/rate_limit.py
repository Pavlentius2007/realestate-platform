# üö¶ backend/middleware/rate_limit.py
"""
Rate Limiting Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
"""

import time
import json
from typing import Dict, Optional, List
from collections import defaultdict, deque
from fastapi import Request, Response, HTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse
import asyncio
from dataclasses import dataclass
from enum import Enum

class RateLimitType(Enum):
    """–¢–∏–ø—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    REQUESTS_PER_MINUTE = "requests_per_minute"
    REQUESTS_PER_HOUR = "requests_per_hour"
    REQUESTS_PER_DAY = "requests_per_day"
    BURST = "burst"

@dataclass
class RateLimitRule:
    """–ü—Ä–∞–≤–∏–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    limit: int
    window: int  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    rule_type: RateLimitType
    paths: List[str]
    methods: List[str]
    
class RateLimiter:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Rate Limiter"""
    
    def __init__(self):
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.requests = defaultdict(lambda: defaultdict(deque))
        self.blocked_ips = {}  # IP -> –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.warnings = defaultdict(int)  # IP -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.rules = [
            # –û–±—â–∏–µ API endpoints
            RateLimitRule(
                limit=100,
                window=3600,  # 1 —á–∞—Å
                rule_type=RateLimitType.REQUESTS_PER_HOUR,
                paths=["/api/"],
                methods=["GET", "POST", "PUT", "DELETE"]
            ),
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
            RateLimitRule(
                limit=10,
                window=300,  # 5 –º–∏–Ω—É—Ç
                rule_type=RateLimitType.REQUESTS_PER_MINUTE,
                paths=["/api/auth/login", "/api/auth/register"],
                methods=["POST"]
            ),
            
            # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            RateLimitRule(
                limit=50,
                window=60,  # 1 –º–∏–Ω—É—Ç–∞
                rule_type=RateLimitType.REQUESTS_PER_MINUTE,
                paths=["/api/search", "/api/filter"],
                methods=["GET", "POST"]
            ),
            
            # Burst protection –¥–ª—è –≤—Å–µ—Ö endpoints
            RateLimitRule(
                limit=20,
                window=60,  # 1 –º–∏–Ω—É—Ç–∞
                rule_type=RateLimitType.BURST,
                paths=["*"],
                methods=["*"]
            )
        ]
    
    def get_client_identifier(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ (IP –∏–ª–∏ user_id)"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP
        real_ip = request.headers.get("X-Real-IP") or \
                  request.headers.get("X-Forwarded-For", "").split(",")[0].strip() or \
                  (request.client.host if request.client else "127.0.0.1")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
        if hasattr(request.state, 'user_id'):
            return f"user_{request.state.user_id}"
        
        return f"ip_{real_ip}"
    
    def is_blocked(self, client_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç"""
        if client_id in self.blocked_ips:
            if time.time() < self.blocked_ips[client_id]:
                return True
            else:
                del self.blocked_ips[client_id]
        return False
    
    def add_request(self, client_id: str, rule: RateLimitRule):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Å—á–µ—Ç—á–∏–∫"""
        now = time.time()
        rule_key = f"{rule.rule_type.value}_{rule.window}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        self.requests[client_id][rule_key].append(now)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        cutoff = now - rule.window
        while (self.requests[client_id][rule_key] and 
               self.requests[client_id][rule_key][0] < cutoff):
            self.requests[client_id][rule_key].popleft()
    
    def get_request_count(self, client_id: str, rule: RateLimitRule) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        rule_key = f"{rule.rule_type.value}_{rule.window}"
        return len(self.requests[client_id][rule_key])
    
    def check_rate_limit(self, request: Request) -> Optional[dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        client_id = self.get_client_identifier(request)
        path = request.url.path
        method = request.method
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
        if self.is_blocked(client_id):
            return {
                "blocked": True,
                "message": "IP temporarily blocked due to rate limit violations",
                "retry_after": int(self.blocked_ips[client_id] - time.time())
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        for rule in self.rules:
            if self.rule_applies(rule, path, method):
                current_count = self.get_request_count(client_id, rule)
                
                if current_count >= rule.limit:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    self.warnings[client_id] += 1
                    
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    if self.warnings[client_id] >= 3:
                        block_time = time.time() + 3600  # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ —á–∞—Å
                        self.blocked_ips[client_id] = block_time
                        return {
                            "blocked": True,
                            "message": "Rate limit exceeded. IP blocked for 1 hour",
                            "retry_after": 3600
                        }
                    
                    return {
                        "blocked": False,
                        "exceeded": True,
                        "message": f"Rate limit exceeded: {current_count}/{rule.limit} requests per {rule.window}s",
                        "retry_after": rule.window,
                        "remaining": 0
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—á–µ—Ç—á–∏–∫
                self.add_request(client_id, rule)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
                return {
                    "blocked": False,
                    "exceeded": False,
                    "current": current_count + 1,
                    "limit": rule.limit,
                    "remaining": rule.limit - current_count - 1,
                    "reset_time": int(time.time() + rule.window)
                }
        
        return None
    
    def rule_applies(self, rule: RateLimitRule, path: str, method: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –∫ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        if "*" not in rule.methods and method not in rule.methods:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
        if "*" in rule.paths:
            return True
        
        for rule_path in rule.paths:
            if path.startswith(rule_path):
                return True
        
        return False
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
        stats = {
            "total_clients": len(self.requests),
            "blocked_ips": len(self.blocked_ips),
            "warnings": len(self.warnings),
            "top_clients": []
        }
        
        # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
        client_requests = {}
        for client_id, rules in self.requests.items():
            total = sum(len(requests) for requests in rules.values())
            client_requests[client_id] = total
        
        stats["top_clients"] = sorted(
            client_requests.items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:10]
        
        return stats

class RateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, app, enable_rate_limiting: bool = True):
        super().__init__(app)
        self.rate_limiter = RateLimiter()
        self.enabled = enable_rate_limiting
        
        # –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç rate limiting
        self.exempt_paths = [
            "/static/",
            "/css/",
            "/js/",
            "/images/",
            "/favicon.ico",
            "/docs",
            "/openapi.json"
        ]
    
    async def dispatch(self, request: Request, call_next):
        if not self.enabled:
            return await call_next(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º exempt paths
        if any(request.url.path.startswith(path) for path in self.exempt_paths):
            return await call_next(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        result = self.rate_limiter.check_rate_limit(request)
        
        if result:
            if result.get("blocked") or result.get("exceeded"):
                response = JSONResponse(
                    status_code=429,
                    content={
                        "error": "Rate limit exceeded",
                        "message": result["message"],
                        "retry_after": result["retry_after"]
                    }
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limit
                response.headers["X-RateLimit-Limit"] = str(result.get("limit", 0))
                response.headers["X-RateLimit-Remaining"] = str(result.get("remaining", 0))
                response.headers["X-RateLimit-Reset"] = str(result.get("reset_time", 0))
                response.headers["Retry-After"] = str(result["retry_after"])
                
                return response
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limit –≤ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        if result and not result.get("blocked") and not result.get("exceeded"):
            response.headers["X-RateLimit-Limit"] = str(result.get("limit", 0))
            response.headers["X-RateLimit-Remaining"] = str(result.get("remaining", 0))
            response.headers["X-RateLimit-Reset"] = str(result.get("reset_time", 0))
        
        return response

# üìä –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def get_rate_limit_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
    return {
        "message": "Rate limiting statistics",
        "note": "Implement connection to middleware instance"
    } 