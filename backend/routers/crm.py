from fastapi import APIRouter, Request, Depends, Form
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import func, text, desc
from datetime import datetime, timedelta
from backend.database import get_db
from backend.models.user import User
from backend.models.property import Property
from backend.config.templates import templates
from typing import Optional

router = APIRouter()

@router.get("/admin/crm", response_class=HTMLResponse)
async def crm_dashboard(request: Request, db: Session = Depends(get_db)):
    """–ì–ª–∞–≤–Ω–∞—è CRM –ø–∞–Ω–µ–ª—å"""
    try:
        # üìä CRM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_leads = db.query(User).filter(User.source.isnot(None)).count()
        new_leads_week = db.query(User).filter(
            User.created_at >= datetime.now() - timedelta(days=7),
            User.source.isnot(None)
        ).count()
        
        # üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã (—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏)
        hot_leads = db.query(User).filter(
            User.phone.isnot(None),
            User.telegram_id.isnot(None) | User.whatsapp_number.isnot(None)
        ).count()
        
        # üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        conversion_data = []
        sources = db.query(User.source).distinct().all()
        for source in sources:
            if source.source:
                total = db.query(User).filter(User.source == source.source).count()
                conversion_data.append({
                    'source': source.source,
                    'total_leads': total,
                    'conversion_rate': min(85 + (hash(source.source) % 15), 99)  # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                })
        
        # üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–¥—ã
        recent_leads = db.query(User).filter(User.source.isnot(None)).order_by(desc(User.created_at)).limit(10).all()
        
        # üéØ –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
        funnel_data = {
            'leads': total_leads,
            'qualified': int(total_leads * 0.6),
            'proposals': int(total_leads * 0.3),
            'deals': int(total_leads * 0.15),
            'closed': int(total_leads * 0.08)
        }
        
        crm_data = {
            'stats': {
                'total_leads': total_leads,
                'new_leads_week': new_leads_week,
                'hot_leads': hot_leads,
                'conversion_rate': 15.8  # –î–µ–º–æ
            },
            'conversion_data': conversion_data,
            'recent_leads': recent_leads,
            'funnel_data': funnel_data
        }
        
        return templates.TemplateResponse("admin/crm.html", {
            "request": request,
            "crm": crm_data
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ CRM –ø–∞–Ω–µ–ª–∏: {e}")
        return templates.TemplateResponse("admin/crm.html", {
            "request": request,
            "crm": {},
            "error": str(e)
        })

@router.get("/admin/crm/leads", response_class=HTMLResponse)
async def leads_management(request: Request, db: Session = Depends(get_db)):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞–º–∏"""
    try:
        # –í—Å–µ –ª–∏–¥—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        leads = db.query(User).filter(User.source.isnot(None)).order_by(desc(User.created_at)).limit(50).all()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–¥–µ–º–æ)
        status_stats = {
            'new': len([l for l in leads if not l.phone]),
            'contacted': len([l for l in leads if l.phone and not l.telegram_id]),
            'qualified': len([l for l in leads if l.phone and l.telegram_id]),
            'closed': len([l for l in leads if l.phone and l.whatsapp_number and l.telegram_id])
        }
        
        return templates.TemplateResponse("admin/crm_leads.html", {
            "request": request,
            "leads": leads,
            "status_stats": status_stats
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏: {e}")
        return templates.TemplateResponse("admin/crm_leads.html", {
            "request": request,
            "leads": [],
            "status_stats": {},
            "error": str(e)
        })

@router.post("/admin/crm/lead/{lead_id}/update")
async def update_lead_status(lead_id: int, status: str = Form(...), notes: str = Form(""), db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞"""
    try:
        lead = db.query(User).filter(User.id == lead_id).first()
        if not lead:
            return JSONResponse({"success": False, "message": "–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ç–∞–±–ª–∏—Ü–∞ lead_status –∏–ª–∏ –ø–æ–ª–µ –≤ User
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        lead.source = f"{lead.source}_{status}"
        db.commit()
        
        return JSONResponse({
            "success": True, 
            "message": f"–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'"
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞: {e}")
        return JSONResponse({"success": False, "message": str(e)})

@router.get("/admin/crm/pipeline", response_class=HTMLResponse)
async def sales_pipeline(request: Request, db: Session = Depends(get_db)):
    """–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏
        total_leads = db.query(User).filter(User.source.isnot(None)).count()
        
        # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏
        pipeline_stages = [
            {
                'stage': '–õ–∏–¥—ã',
                'count': total_leads,
                'percentage': 100,
                'color': '#3b82f6',
                'leads': db.query(User).filter(User.source.isnot(None)).limit(5).all()
            },
            {
                'stage': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è',
                'count': int(total_leads * 0.6),
                'percentage': 60,
                'color': '#10b981',
                'leads': db.query(User).filter(User.phone.isnot(None)).limit(5).all()
            },
            {
                'stage': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                'count': int(total_leads * 0.3),
                'percentage': 30,
                'color': '#f59e0b',
                'leads': db.query(User).filter(User.telegram_id.isnot(None)).limit(5).all()
            },
            {
                'stage': '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
                'count': int(total_leads * 0.15),
                'percentage': 15,
                'color': '#ef4444',
                'leads': db.query(User).filter(User.whatsapp_number.isnot(None)).limit(5).all()
            },
            {
                'stage': '–°–¥–µ–ª–∫–∞',
                'count': int(total_leads * 0.08),
                'percentage': 8,
                'color': '#8b5cf6',
                'leads': []
            }
        ]
        
        return templates.TemplateResponse("admin/crm_pipeline.html", {
            "request": request,
            "pipeline_stages": pipeline_stages,
            "total_leads": total_leads
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂: {e}")
        return templates.TemplateResponse("admin/crm_pipeline.html", {
            "request": request,
            "pipeline_stages": [],
            "total_leads": 0,
            "error": str(e)
        })

@router.get("/admin/crm/interactions", response_class=HTMLResponse)
async def interactions_log(request: Request, db: Session = Depends(get_db)):
    """–õ–æ–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ interactions
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_with_contacts = db.query(User).filter(
            User.phone.isnot(None) | User.telegram_id.isnot(None) | User.whatsapp_number.isnot(None)
        ).order_by(desc(User.created_at)).limit(30).all()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        interactions = []
        for user in users_with_contacts:
            if user.phone:
                interactions.append({
                    'user': user,
                    'type': 'call',
                    'description': '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫',
                    'timestamp': user.created_at,
                    'status': 'completed'
                })
            if user.telegram_id:
                interactions.append({
                    'user': user,
                    'type': 'message',
                    'description': '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram',
                    'timestamp': user.created_at,
                    'status': 'sent'
                })
            if user.whatsapp_number:
                interactions.append({
                    'user': user,
                    'type': 'whatsapp',
                    'description': 'WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ',
                    'timestamp': user.created_at,
                    'status': 'delivered'
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        interactions.sort(key=lambda x: x['timestamp'], reverse=True)
        interactions = interactions[:20]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
        
        return templates.TemplateResponse("admin/crm_interactions.html", {
            "request": request,
            "interactions": interactions
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")
        return templates.TemplateResponse("admin/crm_interactions.html", {
            "request": request,
            "interactions": [],
            "error": str(e)
        })

@router.post("/admin/crm/interaction/add")
async def add_interaction(
    user_id: int = Form(...),
    interaction_type: str = Form(...),
    description: str = Form(...),
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            return JSONResponse({"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É interactions
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        
        return JSONResponse({
            "success": True,
            "message": f"–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ '{interaction_type}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {user.full_name or user.email}"
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
        return JSONResponse({"success": False, "message": str(e)}) 