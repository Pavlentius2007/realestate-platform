from fastapi import APIRouter, Request, Response, Depends, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session, joinedload
from backend.database import SessionLocal
from backend.models.favorite import Favorite
from backend.models.property import Property
from backend.config.templates import templates
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ ModernI18nMiddleware
import uuid

router = APIRouter()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_or_create_session_id(request: Request, response: Response):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å session_id –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session_id = request.cookies.get('session_id')
    if not session_id:
        session_id = str(uuid.uuid4())
        response.set_cookie('session_id', session_id, max_age=30*24*60*60)  # 30 –¥–Ω–µ–π
    return session_id

# üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.get("/favorites", response_class=HTMLResponse)
async def favorites_page(
    request: Request, 
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    favorites = db.query(Favorite)\
        .options(joinedload(Favorite.property).joinedload(Property.images))\
        .filter(Favorite.session_id == session_id)\
        .order_by(Favorite.created_at.desc())\
        .all()
    
    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ModernI18nMiddleware
    return templates.TemplateResponse("favorites.html", {
        "request": request,
        "favorites": favorites,
        "total_count": len(favorites)
    })

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@router.post("/favorites/add/{property_id}")
async def add_to_favorites(
    property_id: int,
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
    property_obj = db.query(Property).filter(Property.id == property_id).first()
    if not property_obj:
        raise HTTPException(status_code=404, detail="–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    existing_favorite = db.query(Favorite)\
        .filter(Favorite.session_id == session_id, Favorite.property_id == property_id)\
        .first()
    
    if existing_favorite:
        return JSONResponse({
            "success": False,
            "message": "–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "in_favorites": True
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    new_favorite = Favorite(
        session_id=session_id,
        property_id=property_id
    )
    db.add(new_favorite)
    db.commit()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    total_count = db.query(Favorite).filter(Favorite.session_id == session_id).count()
    
    return JSONResponse({
        "success": True,
        "message": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
        "in_favorites": True,
        "total_count": total_count
    })

# ‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.delete("/favorites/remove/{property_id}")
async def remove_from_favorites(
    property_id: int,
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    favorite = db.query(Favorite)\
        .filter(Favorite.session_id == session_id, Favorite.property_id == property_id)\
        .first()
    
    if not favorite:
        return JSONResponse({
            "success": False,
            "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º",
            "in_favorites": False
        })
    
    db.delete(favorite)
    db.commit()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    total_count = db.query(Favorite).filter(Favorite.session_id == session_id).count()
    
    return JSONResponse({
        "success": True,
        "message": "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
        "in_favorites": False,
        "total_count": total_count
    })

# üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.get("/favorites/check/{property_id}")
async def check_favorite_status(
    property_id: int,
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    favorite = db.query(Favorite)\
        .filter(Favorite.session_id == session_id, Favorite.property_id == property_id)\
        .first()
    
    total_count = db.query(Favorite).filter(Favorite.session_id == session_id).count()
    
    return JSONResponse({
        "in_favorites": favorite is not None,
        "total_count": total_count
    })

# üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (toggle)
@router.post("/favorites/toggle/{property_id}")
async def toggle_favorite(
    property_id: int,
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
    property_obj = db.query(Property).filter(Property.id == property_id).first()
    if not property_obj:
        raise HTTPException(status_code=404, detail="–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    existing_favorite = db.query(Favorite)\
        .filter(Favorite.session_id == session_id, Favorite.property_id == property_id)\
        .first()
    
    if existing_favorite:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        db.delete(existing_favorite)
        db.commit()
        favorited = False
        message = "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        new_favorite = Favorite(
            session_id=session_id,
            property_id=property_id
        )
        db.add(new_favorite)
        db.commit()
        favorited = True
        message = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    total_count = db.query(Favorite).filter(Favorite.session_id == session_id).count()
    
    return JSONResponse({
        "success": True,
        "message": message,
        "favorited": favorited,
        "total_count": total_count
    })

# üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (JSON)
@router.get("/favorites/list")
async def get_favorites_list(
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    favorites = db.query(Favorite)\
        .filter(Favorite.session_id == session_id)\
        .all()
    
    return JSONResponse({
        "favorites": [{"property_id": fav.property_id} for fav in favorites],
        "total_count": len(favorites)
    })

# üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
@router.post("/favorites/check-multiple")
async def check_multiple_favorite_status(
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    try:
        body = await request.json()
        property_ids = body.get('property_ids', [])
    except:
        property_ids = []
    
    if not property_ids:
        return JSONResponse({"favorites": {}, "total_count": 0})
    
    favorites = db.query(Favorite)\
        .filter(
            Favorite.session_id == session_id,
            Favorite.property_id.in_(property_ids)
        )\
        .all()
    
    favorite_dict = {fav.property_id: True for fav in favorites}
    result = {prop_id: favorite_dict.get(prop_id, False) for prop_id in property_ids}
    
    total_count = db.query(Favorite).filter(Favorite.session_id == session_id).count()
    
    return JSONResponse({
        "favorites": result,
        "total_count": total_count
    })

# üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@router.delete("/favorites/clear")
async def clear_favorites(
    request: Request,
    response: Response,
    db: Session = Depends(get_db)
):
    session_id = get_or_create_session_id(request, response)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.query(Favorite).filter(Favorite.session_id == session_id).delete()
    db.commit()
    
    return JSONResponse({
        "success": True,
        "message": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ",
        "total_count": 0
    }) 