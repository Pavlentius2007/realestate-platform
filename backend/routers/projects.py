from fastapi import APIRouter, Depends, Request, Query, HTTPException
from sqlalchemy.orm import Session
from fastapi.responses import HTMLResponse
from pathlib import Path
from datetime import datetime
import json
from backend.config.templates import templates
from backend.database import get_db, SessionLocal
from backend.models.property import Property
from backend.models.project import Project
from backend.fix_i18n_modern import inject_translator_to_templates

# üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —à–∞–±–ª–æ–Ω—ã
BASE_DIR = Path(__file__).resolve().parent.parent

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def safe_decode(text):
    if not text:
        return text
    if isinstance(text, bytes):
        return text.decode('utf-8', errors='ignore')
    if isinstance(text, str):
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º
            return text.encode('latin1').decode('utf-8', errors='ignore')
        except:
            return text
    return text

def safe_decode_array(arr):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (–∏–ª–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É). –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∞,
    –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ—ë –≤ —Å–ø–∏—Å–æ–∫, —Ä–∞–∑–¥–µ–ª—è—è –ø–æ –∑–∞–ø—è—Ç–æ–π."""
    if not arr:
        return []

    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "one, two, three" ‚Äì –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
    if isinstance(arr, str):
        arr = [a.strip() for a in arr.split(',') if a.strip()]

    return [safe_decode(item) for item in arr]

router = APIRouter()

# üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤
@router.get("/projects", response_class=HTMLResponse)
async def projects_catalog(
    request: Request, 
    lang: str,
    status: str = Query(default=""),
    district: str = Query(default=""),
    db: Session = Depends(get_db)
):
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    inject_translator_to_templates(templates, request)
    
    try:
        filters = []
        
        if status:
            filters.append(Project.status == status)
        if district:
            filters.append(Project.district == district)
        
        projects_raw = db.query(Project).filter(*filters).all()
        print(f"Found {len(projects_raw)} projects")  # –û—Ç–ª–∞–¥–∫–∞
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = []
        for p in projects_raw:
            clean_p = type('obj', (object,), {
                'id': p.id,
                'slug': p.slug,
                'title': p.title,
                'subtitle': safe_decode(p.subtitle),
                'description': safe_decode(p.description),
                'district': safe_decode(p.district),
                'developer': p.developer,
                'completion_year': p.completion_year,
                'price_from': p.price_from,
                'price_to': p.price_to,
                'hero_image': p.hero_image,
                'highlights': safe_decode_array(p.highlights),
                'status': p.status,
                'is_featured': p.is_featured
            })
            projects.append(clean_p)
        
    except Exception as e:
        print(f"Error loading projects: {e}")
        projects = []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    districts = db.query(Project.district)\
        .filter(Project.district.isnot(None))\
        .distinct()\
        .all()
    districts = [d[0] for d in districts if d[0]]
    
    return templates.TemplateResponse("projects_catalog.html", {
        "request": request,
        "projects": projects,
        "districts": districts,
        "selected_status": status,
        "selected_district": district
    })

# ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ slug
@router.get("/projects/{project_slug}", response_class=HTMLResponse)
async def project_detail(
    request: Request, 
    lang: str,
    project_slug: str, 
    db: Session = Depends(get_db)
):
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    inject_translator_to_templates(templates, request)
    
    try:
        print(f"Looking for project with slug: {project_slug}")  # –û—Ç–ª–∞–¥–∫–∞
        project = db.query(Project).filter(Project.slug == project_slug).first()
        
        if not project:
            print(f"Project not found: {project_slug}")  # –û—Ç–ª–∞–¥–∫–∞
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"Found project: {project.title}")  # –û—Ç–ª–∞–¥–∫–∞
        
        # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
        clean_project = type('obj', (object,), {
            'id': project.id,
            'slug': project.slug,
            'title': project.title,
            'subtitle': safe_decode(project.subtitle),
            'description': safe_decode(project.description),
            'location': project.location,
            'district': safe_decode(project.district),
            'developer': project.developer,
            'completion_year': project.completion_year,
            'total_units': project.total_units,
            'floors': project.floors,
            'price_from': project.price_from,
            'price_to': project.price_to,
            'currency': project.currency,
            'hero_image': project.hero_image,
            'gallery_images': project.gallery_images,
            'highlights': safe_decode_array(project.highlights),
            'amenities': safe_decode_array(project.amenities),
            'unit_types': project.unit_types,
            'payment_plan': safe_decode(project.payment_plan),
            'down_payment': project.down_payment,
            'monthly_payment': project.monthly_payment,
            'roi_info': project.roi_info,
            'status': project.status,
            'is_featured': project.is_featured
        })
        
        # –û—Ç–ª–∞–¥–∫–∞ (–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞)
        # print(f"Description after decode: {clean_project.description}")
        # print(f"Highlights after decode: {clean_project.highlights}")
        
    except Exception as e:
        print(f"Error loading project: {e}")
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —Ä–∞–π–æ–Ω—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
    related_properties = db.query(Property)\
        .filter(
            Property.district == project.district,
            Property.is_new_building == True
        )\
        .limit(6)\
        .all()
    
    # –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ç–æ–º –∂–µ —Ä–∞–π–æ–Ω–µ
    related_projects = db.query(Project)\
        .filter(
            Project.district == project.district,
            Project.id != project.id,
            Project.status == "active"
        )\
        .limit(3)\
        .all()
    
    return templates.TemplateResponse("project_detail.html", {
        "request": request,
        "project": clean_project,
        "related_properties": related_properties,
        "related_projects": related_projects
    })

# ‚úÖ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è AJAX)
@router.get("/api/projects")
def get_projects_api(
    request: Request,
    lang: str,
    status: str = Query(default=""),
    district: str = Query(default=""),
    featured_only: bool = Query(default=False),
    db: Session = Depends(get_db),
):
    filters = []

    if status:
        filters.append(Project.status == status)
    if district:
        filters.append(Project.district == district)
    if featured_only:
        filters.append(Project.is_featured == True)

    projects = db.query(Project).filter(*filters).all()
    
    return {
        "projects": [
            {
                "id": p.id,
                "slug": p.slug,
                "title": p.title,
                "subtitle": p.subtitle,
                "location": p.location,
                "district": p.district,
                "developer": p.developer,
                "price_from": p.price_from,
                "price_to": p.price_to,
                "hero_image": p.hero_image,
                "highlights": p.highlights,
                "completion_year": p.completion_year
            }
            for p in projects
        ]
    }

# –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä–æ—É—Ç—ã - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.get("/projects/pty-residence", response_class=HTMLResponse)
async def pty_redirect(request: Request, lang: str):
    return templates.TemplateResponse(
        "redirect.html", 
        {"request": request, "redirect_url": f"/{lang}/projects/pty-residence"}
    )

@router.get("/projects/zenith-pattaya", response_class=HTMLResponse)
async def zenith_redirect(request: Request, lang: str):
    return templates.TemplateResponse(
        "redirect.html", 
        {"request": request, "redirect_url": f"/{lang}/projects/zenith-pattaya"}
    )

# –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ä–æ—É—Ç –∞—Ä–µ–Ω–¥—ã - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ properties.py
@router.get("/rent", response_class=HTMLResponse)
async def rent_page_redirect(request: Request, lang: str):
    return templates.TemplateResponse(
        "redirect.html", 
        {"request": request, "redirect_url": f"/{lang}/properties?deal_type=rent"}
    )

# üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞
@router.get("/projects/test", response_class=HTMLResponse)
async def test_projects_router(request: Request, lang: str):
    return HTMLResponse(content=f"""
    <h1>‚úÖ Projects Router Working!</h1>
    <p>Language: {lang}</p>
    <p>Time: {datetime.now()}</p>
    <p><a href="/{lang}/projects">Back to projects catalog</a></p>
    """)
