# üìÑ backend/schemas/auth.py
"""
–°—Ö–µ–º—ã Pydantic –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

from pydantic import BaseModel, EmailStr, Field, validator
from typing import Optional
from datetime import datetime

class UserRegister(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email: EmailStr = Field(..., description="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password: str = Field(..., min_length=6, max_length=128, description="–ü–∞—Ä–æ–ª—å")
    full_name: Optional[str] = Field(None, max_length=200, description="–ü–æ–ª–Ω–æ–µ –∏–º—è")
    phone: Optional[str] = Field(None, max_length=20, description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    
    @validator('password')
    def validate_password_strength(cls, v):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
        if len(v.strip()) < 6:
            raise ValueError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
        return v.strip()
    
    @validator('full_name')
    def validate_full_name(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏"""
        if v:
            v = v.strip()
            if len(v) < 2:
                raise ValueError('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
        return v
    
    @validator('phone')
    def validate_phone(cls, v):
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if v:
            v = v.strip()
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
            import re
            clean_phone = re.sub(r'[^\d+]', '', v)
            if len(clean_phone) < 10:
                raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            return clean_phone
        return v

class UserLogin(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email: EmailStr = Field(..., description="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password: str = Field(..., description="–ü–∞—Ä–æ–ª—å")

class TokenResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏"""
    access_token: str = Field(..., description="JWT Access —Ç–æ–∫–µ–Ω")
    refresh_token: str = Field(..., description="JWT Refresh —Ç–æ–∫–µ–Ω") 
    token_type: str = Field(default="bearer", description="–¢–∏–ø —Ç–æ–∫–µ–Ω–∞")
    expires_in: int = Field(..., description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ access —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    user: 'UserProfile' = Field(..., description="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

class RefreshTokenRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    refresh_token: str = Field(..., description="Refresh —Ç–æ–∫–µ–Ω")

class UserProfile(BaseModel):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤)"""
    id: int = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    email: EmailStr = Field(..., description="Email")
    full_name: Optional[str] = Field(None, description="–ü–æ–ª–Ω–æ–µ –∏–º—è")
    phone: Optional[str] = Field(None, description="–¢–µ–ª–µ—Ñ–æ–Ω")
    created_at: datetime = Field(..., description="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    is_active: bool = Field(default=True, description="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    class Config:
        from_attributes = True

class UserUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    full_name: Optional[str] = Field(None, max_length=200, description="–ü–æ–ª–Ω–æ–µ –∏–º—è")
    phone: Optional[str] = Field(None, max_length=20, description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    
    @validator('full_name')
    def validate_full_name(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏"""
        if v:
            v = v.strip()
            if len(v) < 2:
                raise ValueError('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
        return v
    
    @validator('phone')
    def validate_phone(cls, v):
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if v:
            v = v.strip()
            import re
            clean_phone = re.sub(r'[^\d+]', '', v)
            if len(clean_phone) < 10:
                raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            return clean_phone
        return v

class PasswordChangeRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è"""
    current_password: str = Field(..., description="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
    new_password: str = Field(..., min_length=6, max_length=128, description="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
    
    @validator('new_password')
    def validate_password_strength(cls, v):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
        if len(v.strip()) < 6:
            raise ValueError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
        return v.strip()

class PasswordResetRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"""
    email: EmailStr = Field(..., description="Email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")

class PasswordResetConfirm(BaseModel):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    token: str = Field(..., description="–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
    new_password: str = Field(..., min_length=6, max_length=128, description="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
    
    @validator('new_password')
    def validate_password_strength(cls, v):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
        if len(v.strip()) < 6:
            raise ValueError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
        return v.strip()

# –û–±–Ω–æ–≤–ª—è–µ–º forward references
TokenResponse.model_rebuild() 