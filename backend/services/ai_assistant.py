import re
import json
import uuid
from typing import List, Dict, Any, Optional, Tuple
from sqlalchemy.orm import Session
from datetime import datetime

try:
    from backend.models.property import Property
    from backend.models.chat import ChatSession, ChatMessage
except ImportError:
    from models.property import Property
    from models.chat import ChatSession, ChatMessage

class RealEstateAIAssistant:
    """–£–º–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, db: Session):
        self.db = db
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.budget_keywords = {
            '–¥–æ': 'max', '–Ω–µ –±–æ–ª—å—à–µ': 'max', '–º–∞–∫—Å–∏–º—É–º': 'max', '–ª–∏–º–∏—Ç': 'max',
            '–æ—Ç': 'min', '–Ω–µ –º–µ–Ω—å—à–µ': 'min', '–º–∏–Ω–∏–º—É–º': 'min', '–Ω–∞—á–∏–Ω–∞—è': 'min',
            '–æ–∫–æ–ª–æ': 'around', '–ø—Ä–∏–º–µ—Ä–Ω–æ': 'around', '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ': 'around'
        }
        
        self.property_types = {
            '–∫–≤–∞—Ä—Ç–∏—Ä–∞': 'apartment', '–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã': 'apartment', '–∫–æ–Ω–¥–æ': 'condo',
            '–≤–∏–ª–ª–∞': 'villa', '–¥–æ–º': 'house', '—Ç–∞—É–Ω—Ö–∞—É—Å': 'townhouse',
            '—Å—Ç—É–¥–∏—è': 'studio', '–ø–µ–Ω—Ç—Ö–∞—É—Å': 'penthouse'
        }
        
        self.districts = {
            '—Ü–µ–Ω—Ç—Ä': 'central_pattaya', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è': 'central_pattaya',
            '—Å–µ–≤–µ—Ä': 'north_pattaya', '—Å–µ–≤–µ—Ä–Ω–∞—è': 'north_pattaya',
            '—é–≥': 'south_pattaya', '—é–∂–Ω–∞—è': 'south_pattaya',
            '–¥–∂–æ–º—Ç—å–µ–Ω': 'jomtien', '–Ω–∞–∫–ª—É–∞': 'naklua', '–≤–æ–Ω–≥–∞–º–∞—Ç': 'wong_amat',
            '–ø—Ä–∞—Ç–∞–º–Ω–∞–∫': 'pratamnak'
        }
        
        self.amenities_keywords = {
            '–±–∞—Å—Å–µ–π–Ω': 'pool', '—Å–ø–æ—Ä—Ç–∑–∞–ª': 'gym', '—Ñ–∏—Ç–Ω–µ—Å': 'gym',
            '–ø–∞—Ä–∫–æ–≤–∫–∞': 'parking', '–æ—Ö—Ä–∞–Ω–∞': 'security', '–ª–∏—Ñ—Ç': 'elevator',
            '–±–∞–ª–∫–æ–Ω': 'balcony', '—Ç–µ—Ä—Ä–∞—Å–∞': 'terrace', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä': 'ac'
        }
        
        self.view_keywords = {
            '–º–æ—Ä–µ': 'sea', '–æ–∫–µ–∞–Ω': 'sea', '–≤–æ–¥–∞': 'sea',
            '–≥–æ—Ä–æ–¥': 'city', '–≥–æ—Ä—ã': 'mountain', '—Å–∞–¥': 'garden', '–ø–∞—Ä–∫': 'garden'
        }

    def get_or_create_session(self, session_id: str = None) -> ChatSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
        if not session_id:
            session_id = str(uuid.uuid4())
            
        session = self.db.query(ChatSession).filter(ChatSession.session_id == session_id).first()
        if not session:
            session = ChatSession(
                session_id=session_id,
                user_preferences={}
            )
            self.db.add(session)
            self.db.commit()
            self.db.refresh(session)
        
        return session

    def parse_user_message(self, message: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"""
        message_lower = message.lower()
        
        search_params = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—é–¥–∂–µ—Ç
        budget_match = re.search(r'(\d+(?:\s?\d+)*)\s*(?:—Ç—ã—Å—è—á|–º–ª–Ω|k|—Ç—ã—Å|–±–∞—Ç|‡∏ø)', message_lower)
        if budget_match:
            amount = int(budget_match.group(1).replace(' ', ''))
            if '–º–ª–Ω' in message_lower:
                amount *= 1000000
            elif any(word in message_lower for word in ['—Ç—ã—Å—è—á', '—Ç—ã—Å', 'k']):
                amount *= 1000
            search_params['budget'] = amount
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        for keyword, prop_type in self.property_types.items():
            if keyword in message_lower:
                search_params['property_type'] = prop_type
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω
        for keyword, district in self.districts.items():
            if keyword in message_lower:
                search_params['district'] = district
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
        bedrooms_match = re.search(r'(\d+)\s*(?:—Å–ø–∞–ª—å–Ω|–∫–æ–º–Ω–∞—Ç|bedroom)', message_lower)
        if bedrooms_match:
            search_params['bedrooms'] = int(bedrooms_match.group(1))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å
        area_match = re.search(r'(\d+)\s*(?:–º¬≤|–∫–≤\.–º|–º–µ—Ç—Ä)', message_lower)
        if area_match:
            search_params['area'] = int(area_match.group(1))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–¥–æ–±—Å—Ç–≤–∞
        amenities = []
        for keyword, amenity in self.amenities_keywords.items():
            if keyword in message_lower:
                amenities.append(amenity)
        if amenities:
            search_params['amenities'] = amenities
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥
        for keyword, view in self.view_keywords.items():
            if keyword in message_lower:
                search_params['view'] = view
                break
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª—å (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –∂–∏–∑–Ω—å, –æ—Ç–¥—ã—Ö)
        if any(word in message_lower for word in ['–∏–Ω–≤–µ—Å—Ç', '–¥–æ—Ö–æ–¥', '—Å–¥–∞—á–∞', '–ø—Ä–∏–±—ã–ª—å']):
            search_params['purpose'] = 'investment'
        elif any(word in message_lower for word in ['–∂–∏—Ç—å', '–ø–º–∂', '–ø–µ—Ä–µ–µ–∑–¥', '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ']):
            search_params['purpose'] = 'living'
        elif any(word in message_lower for word in ['–æ—Ç–¥—ã—Ö', '–æ—Ç–ø—É—Å–∫', '—Ç—É—Ä–∏–∑–º', '–∫–∞–Ω–∏–∫—É–ª—ã']):
            search_params['purpose'] = 'vacation'
        
        return search_params

    def search_properties(self, params: Dict[str, Any]) -> List[Property]:
        """–ò—â–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        query = self.db.query(Property)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É
        if 'budget' in params:
            query = query.filter(Property.price <= params['budget'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if 'property_type' in params:
            query = query.filter(Property.property_type == params['property_type'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–π–æ–Ω—É
        if 'district' in params:
            query = query.filter(Property.district == params['district'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∞–ª–µ–Ω
        if 'bedrooms' in params:
            query = query.filter(Property.bedrooms >= params['bedrooms'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏
        if 'area' in params:
            query = query.filter(Property.area >= params['area'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥—É
        if 'view' in params:
            view_keyword = params['view']
            if view_keyword == 'sea':
                query = query.filter(Property.description.ilike('%–º–æ—Ä–µ%'))
            elif view_keyword == 'city':
                query = query.filter(Property.description.ilike('%–≥–æ—Ä–æ–¥%'))
            elif view_keyword == 'mountain':
                query = query.filter(Property.description.ilike('%–≥–æ—Ä%'))
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É–¥–æ–±—Å—Ç–≤–∞–º
        if 'amenities' in params:
            for amenity in params['amenities']:
                if amenity == 'pool':
                    query = query.filter(Property.description.ilike('%–±–∞—Å—Å–µ–π–Ω%'))
                elif amenity == 'gym':
                    query = query.filter(Property.description.ilike('%—Å–ø–æ—Ä—Ç–∑–∞–ª%'))
                elif amenity == 'parking':
                    query = query.filter(Property.description.ilike('%–ø–∞—Ä–∫–æ–≤%'))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return query.limit(20).all()

    def generate_response(self, user_message: str, found_properties: List[Property], 
                         search_params: Dict[str, Any], session: ChatSession) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        
        if not found_properties:
            return self._generate_no_results_response(search_params)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        total_count = len(found_properties)
        avg_price = sum(p.price for p in found_properties if p.price) // total_count
        price_range = {
            'min': min(p.price for p in found_properties if p.price),
            'max': max(p.price for p in found_properties if p.price)
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_parts = []
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        response_parts.append(f"ü§ñ –û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—à–µ–ª {total_count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ü–µ–Ω–µ
        if 'budget' in search_params:
            budget = search_params['budget']
            if avg_price < budget * 0.8:
                response_parts.append(f"üí∞ –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ({avg_price:,.0f} ‡∏ø) –Ω–∏–∂–µ –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.")
            elif avg_price > budget:
                response_parts.append(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –±—é–¥–∂–µ—Ç–∞, –Ω–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç {price_range['min']:,.0f} ‡∏ø.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        property_types_found = {}
        for prop in found_properties:
            ptype = prop.property_type
            if ptype not in property_types_found:
                property_types_found[ptype] = 0
            property_types_found[ptype] += 1
        
        if len(property_types_found) > 1:
            most_common = max(property_types_found.items(), key=lambda x: x[1])
            response_parts.append(f"üè† –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–∏–ø–∞ '{most_common[0]}' ({most_common[1]} —à—Ç.)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–π–æ–Ω—É
        districts_found = {}
        for prop in found_properties:
            if prop.district:
                if prop.district not in districts_found:
                    districts_found[prop.district] = 0
                districts_found[prop.district] += 1
        
        if districts_found:
            top_district = max(districts_found.items(), key=lambda x: x[1])
            response_parts.append(f"üìç –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–∞–π–æ–Ω: {top_district[0]} ({top_district[1]} –æ–±—ä–µ–∫—Ç–æ–≤)")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'purpose' in search_params:
            purpose = search_params['purpose']
            if purpose == 'investment':
                response_parts.append("üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ —Å —Ö–æ—Ä–æ—à–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.")
            elif purpose == 'living':
                response_parts.append("üè° –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã —à–∫–æ–ª—ã, –±–æ–ª—å–Ω–∏—Ü—ã –∏ –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
            elif purpose == 'vacation':
                response_parts.append("üèñÔ∏è –î–ª—è –æ—Ç–¥—ã—Ö–∞ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Ä—è–¥–æ–º —Å –ø–ª—è–∂–µ–º –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏.")
        
        # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        top_properties = sorted(found_properties, key=lambda p: (
            p.price if p.price else 999999999,  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
            -p.area if p.area else 0  # –ò –ø–æ –ø–ª–æ—â–∞–¥–∏ (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
        ))[:3]
        
        response_parts.append("üåü –ú–æ–∏ —Ç–æ–ø-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, prop in enumerate(top_properties, 1):
            price_str = f"{prop.price:,.0f} ‡∏ø" if prop.price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            area_str = f"{prop.area} –º¬≤" if prop.area else "–ü–ª–æ—â–∞–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            response_parts.append(f"{i}. {prop.title} - {price_str}, {area_str}")
        
        response_parts.append("\nüí¨ –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∫–æ–º-—Ç–æ –æ–±—ä–µ–∫—Ç–µ? –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞?")
        
        return "\n\n".join(response_parts)

    def _generate_no_results_response(self, search_params: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
        response_parts = [
            "ü§î –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
            "",
            "üí° –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
        ]
        
        suggestions = []
        
        if 'budget' in search_params:
            budget = search_params['budget']
            suggestions.append(f"‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –¥–æ {budget * 1.2:,.0f} ‡∏ø")
        
        if 'property_type' in search_params:
            suggestions.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        if 'district' in search_params:
            suggestions.append("‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ä–∞–π–æ–Ω–∞—Ö")
        
        if 'bedrooms' in search_params:
            bedrooms = search_params['bedrooms']
            if bedrooms > 1:
                suggestions.append(f"‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å {bedrooms-1} —Å–ø–∞–ª—å–Ω—è–º–∏")
        
        if not suggestions:
            suggestions = [
                "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞",
                "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞–º –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π"
            ]
        
        response_parts.extend(suggestions)
        response_parts.append("\nüìû –ò–ª–∏ —è –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å –≤–∞—Å —Å –Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!")
        
        return "\n".join(response_parts)

    def save_message(self, session: ChatSession, message_type: str, content: str, 
                     metadata: Dict[str, Any] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        message = ChatMessage(
            session_id=session.session_id,
            message_type=message_type,
            content=content,
            extra_data=metadata or {}
        )
        self.db.add(message)
        self.db.commit()

    def process_message(self, user_message: str, session_id: str = None) -> Tuple[str, List[Property], str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = self.get_or_create_session(session_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.save_message(session, "user", user_message)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        search_params = self.parse_user_message(user_message)
        
        # –ò—â–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        found_properties = self.search_properties(search_params)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        ai_response = self.generate_response(user_message, found_properties, search_params, session)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        self.save_message(session, "assistant", ai_response, {
            "search_params": search_params,
            "found_count": len(found_properties),
            "property_ids": [p.id for p in found_properties]
        })
        
        return ai_response, found_properties, session.session_id
