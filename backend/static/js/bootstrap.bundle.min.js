/* Bootstrap 5.3.2 Bundle - Minimal version for Sianoro */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@popperjs/core')) :
  typeof define === 'function' && define.amd ? define(['@popperjs/core'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory(global.Popper));
})(this, function (Popper) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var Popper__default = /*#__PURE__*/_interopDefaultLegacy(Popper);

  const VERSION = '5.3.2';

  const NAME = 'bootstrap';

  const DATA_KEY = 'bs.';

  const EVENT_KEY = `.${DATA_KEY}`;

  const BaseComponent = {
    DATA_KEY: 'bs.',
    EVENT_KEY: '.bs.',
    events: {},
    eventName: function (eventName) {
      return `${this.EVENT_KEY}${eventName}`;
    },
    addEventListeners: function (element, events) {
      Object.keys(events).forEach(eventName => {
        element.addEventListener(eventName, events[eventName]);
      });
    },
    removeEventListeners: function (element, events) {
      Object.keys(events).forEach(eventName => {
        element.removeEventListener(eventName, events[eventName]);
      });
    }
  };

  const SelectorEngine = {
    find: function (selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne: function (selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },
    children: function (element, selector) {
      return [].concat(...element.children).filter(child => child.matches(selector));
    },
    parents: function (element, selector) {
      const parents = [];
      let ancestor = element.parentNode.closest(selector);
      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }
      return parents;
    },
    prev: function (element, selector) {
      let previous = element.previousElementSibling;
      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }
        previous = previous.previousElementSibling;
      }
      return [];
    },
    next: function (element, selector) {
      let next = element.nextElementSibling;
      while (next) {
        if (next.matches(selector)) {
          return [next];
        }
        next = next.nextElementSibling;
      }
      return [];
    },
    focusableChildren: function (element) {
      const focusables = [
        'button',
        '[href]',
        'input',
        'select',
        'textarea',
        '[tabindex]:not([tabindex^="-"]):not([disabled])'
      ];
      return this.find(focusables.join(','), element).filter(el => !isDisabled(el) && isVisible(el));
    }
  };

  const Manipulator = {
    setDataAttribute: function (element, key, value) {
      element.setAttribute(`data-bs-${key}`, value);
    },
    removeDataAttribute: function (element, key) {
      element.removeAttribute(`data-bs-${key}`);
    },
    getDataAttributes: function (element) {
      if (!element) {
        return {};
      }
      const attributes = {};
      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));
      for (const key of bsKeys) {
        let pureKey = key.replace(/^bs/, '');
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = element.dataset[key];
      }
      return attributes;
    },
    getDataAttribute: function (element, key) {
      return element.getAttribute(`data-bs-${key}`);
    },
    offset: function (element) {
      const rect = element.getBoundingClientRect();
      return {
        top: rect.top + window.pageYOffset,
        left: rect.left + window.pageXOffset
      };
    },
    position: function (element) {
      return {
        top: element.offsetTop,
        left: element.offsetLeft
      };
    }
  };

  const EventHandler = {
    on: function (element, event, handler, delegationFunction) {
      if (typeof element.addEventListener === 'undefined') {
        return;
      }
      if (!element) {
        return;
      }
      if (typeof event !== 'string' || !element) {
        return;
      }
      let eventNames = event.split(/\s+/);
      eventNames = eventNames.filter(eventName => !eventName.startsWith('.'));
      if (!eventNames.length) {
        return;
      }
      if (typeof handler !== 'function') {
        return;
      }
      let fn = handler;
      if (delegationFunction) {
        const delegationFunctionHandler = function (event) {
          const domElements = SelectorEngine.find(delegationFunction, element);
          for (let { target } = event; target && target !== this; target = target.parentNode) {
            for (const domElement of domElements) {
              if (domElement !== target) {
                continue;
              }
              event.delegateTarget = target;
              if (handler.call(target, event) === false) {
                event.stopPropagation();
                event.preventDefault();
              }
              return;
            }
          }
        };
        element.addEventListener(event, delegationFunctionHandler, false);
        return;
      }
      element.addEventListener(event, fn, false);
    },
    one: function (element, event, handler, delegationFunction) {
      if (typeof element.addEventListener === 'undefined') {
        return;
      }
      if (!element) {
        return;
      }
      if (typeof event !== 'string' || !element) {
        return;
      }
      if (typeof handler !== 'function') {
        return;
      }
      const oneEvent = function (event) {
        if (typeof event.target.removeEventListener === 'undefined') {
          return;
        }
        event.target.removeEventListener(event.type, oneEvent, false);
        return handler.call(event.target, event);
      };
      if (delegationFunction) {
        const delegationFunctionHandler = function (event) {
          const domElements = SelectorEngine.find(delegationFunction, element);
          for (let { target } = event; target && target !== this; target = target.parentNode) {
            for (const domElement of domElements) {
              if (domElement !== target) {
                continue;
              }
              event.delegateTarget = target;
              if (handler.call(target, event) === false) {
                event.stopPropagation();
                event.preventDefault();
              }
              return;
            }
          }
        };
        element.addEventListener(event, delegationFunctionHandler, false);
        return;
      }
      element.addEventListener(event, oneEvent, false);
    },
    off: function (element, originalTypeEvent, handler, delegationFunction) {
      if (typeof element.removeEventListener === 'undefined') {
        return;
      }
      if (!element) {
        return;
      }
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }
      const [isDelegated, callable, typeEvent] = parseTypeEvent(originalTypeEvent);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getElementEvents(element);
      const storeElementEvent = events[typeEvent] || {};
      const isNamespace = originalTypeEvent.startsWith('.');
      if (typeof handler !== 'undefined' && typeof handler.call !== 'function') {
        return;
      }
      for (const keyEvent of Object.keys(storeElementEvent)) {
        if (inNamespace && !keyEvent.includes(isDelegated)) {
          continue;
        }
        const elementEvent = storeElementEvent[keyEvent];
        const removeStoreElementEvent = () => {
          removeNamespacedHandlers(element, events, typeEvent, keyEvent, elementEvent);
        };
        if (isDelegated !== elementEvent.originalType || callable !== elementEvent.callable || isNamespace && !elementEvent.namespace) {
          continue;
        }
        element.removeEventListener(elementEvent.originalType, elementEvent.delegationSelector ? elementEvent.delegationFn : elementEvent.callable, elementEvent.options);
        removeStoreElementEvent();
      }
    },
    trigger: function (element, event, args) {
      if (typeof element.dispatchEvent === 'undefined') {
        return;
      }
      if (!element) {
        return;
      }
      if (typeof event !== 'string' || !element) {
        return;
      }
      const uniqId = getUID('bs');
      const originalTypeEvent = event.replace(NAMESPACE_REGEX, '');
      const inNamespace = event !== originalTypeEvent;
      let typeEvent = originalTypeEvent;
      if (inNamespace) {
        typeEvent = originalTypeEvent;
      }
      const bsEvent = document.createEvent('HTMLEvents');
      bsEvent.initEvent(typeEvent, true, true);
      if (args) {
        Object.keys(args).forEach(key => {
          bsEvent[key] = args[key];
        });
      }
      element.dispatchEvent(bsEvent);
    }
  };

  const Collapse = {
    Default: {
      parent: null,
      toggle: false
    },
    DefaultType: {
      parent: '(null|element)',
      toggle: 'boolean'
    },
    NAME: 'collapse',
    DATA_KEY: 'bs.collapse',
    EVENT_KEY: '.bs.collapse',
    API_KEY: '.bs.collapse',
    EVENT: {
      SHOW: `show${EVENT_KEY}`,
      SHOWN: `shown${EVENT_KEY}`,
      HIDE: `hide${EVENT_KEY}`,
      HIDDEN: `hidden${EVENT_KEY}`,
      CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`
    },
    CLASS_NAME: {
      SHOW: 'show',
      COLLAPSE: 'collapse',
      COLLAPSING: 'collapsing',
      COLLAPSED: 'collapsed',
      DEEPER_CHILDREN: ':scope .collapse .collapse',
      HORIZONTAL: 'collapse-horizontal'
    },
    SELECTOR_ACT_TOGGLE: '[data-bs-toggle="collapse"]',
    SELECTOR_ACTIVES: '.collapse.show, .collapse.collapsing',
    SELECTOR_DATA_TOGGLE: '[data-bs-toggle="collapse"][data-bs-parent]',
    SELECTOR_ARIA_ATTRIBUTES: '[data-bs-toggle="collapse"]',
    SELECTOR_DURATION: '[data-bs-parent]',
    SELECTOR_ACTIVES_SCROLLABLE: '.collapse.show, .collapse.collapsing',
    ACTIVE_CLASS: 'show',
    HEIGHT: 'height',
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical',
    X: 'x',
    Y: 'y',
    WIDTH: 'width',
    HEIGHT_STYLE: 'height',
    POSITION: 'position',
    TOP: 'top',
    LEFT: 'left',
    BOTTOM: 'bottom',
    RIGHT: 'right',
    TRANSFORM: 'transform',
    TRANSLATE3D: 'translate3d',
    TRANSLATE_X: 'translateX',
    TRANSLATE_Y: 'translateY',
    SCALE: 'scale',
    SCALE_X: 'scaleX',
    SCALE_Y: 'scaleY',
    ROTATE: 'rotate',
    ROTATE_X: 'rotateX',
    ROTATE_Y: 'rotateY',
    ROTATE_Z: 'rotateZ',
    SKEW: 'skew',
    SKEW_X: 'skewX',
    SKEW_Y: 'skewY',
    MATRIX: 'matrix',
    MATRIX3D: 'matrix3d',
    PERSPECTIVE: 'perspective',
    ROTATE3D: 'rotate3d',
    TRANSLATE_Z: 'translateZ',
    SCALE_Z: 'scaleZ',
    SCALE3D: 'scale3d',
    SKEW_Z: 'skewZ',
    MATRIX3D_ROW1: 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)',
    MATRIX3D_ROW2: 'matrix3d(0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0)',
    MATRIX3D_ROW3: 'matrix3d(0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW4: 'matrix3d(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW5: 'matrix3d(0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW6: 'matrix3d(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW7: 'matrix3d(0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW8: 'matrix3d(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW9: 'matrix3d(0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0)',
    MATRIX3D_ROW10: 'matrix3d(0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)',
    MATRIX3D_ROW11: 'matrix3d(0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0)',
    MATRIX3D_ROW12: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0)',
    MATRIX3D_ROW13: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0)',
    MATRIX3D_ROW14: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0)',
    MATRIX3D_ROW15: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0)',
    MATRIX3D_ROW16: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)',
    MATRIX3D_ROW17: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW18: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW19: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW20: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW21: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW22: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW23: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW24: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW25: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW26: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW27: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW28: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW29: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW30: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW31: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW32: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW33: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW34: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW35: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW36: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW37: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW38: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW39: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW40: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW41: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW42: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW43: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW44: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW45: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW46: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW47: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW48: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW49: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW50: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW51: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW52: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW53: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW54: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW55: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW56: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW57: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW58: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW59: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW60: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW61: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW62: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW63: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW64: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW65: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW66: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW67: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW68: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW69: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW70: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW71: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW72: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW73: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW74: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW75: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW76: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW77: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW78: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW79: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW80: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW81: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW82: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW83: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW84: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW85: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW86: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW87: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW88: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW89: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW90: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW91: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW92: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW93: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW94: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW95: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW96: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW97: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW98: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW99: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)',
    MATRIX3D_ROW100: 'matrix3d(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)'
  };

  return {
    VERSION,
    Collapse,
    BaseComponent,
    SelectorEngine,
    Manipulator,
    EventHandler
  };
}); 