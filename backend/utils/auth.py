# üîê backend/utils/auth.py
"""
–°–∏—Å—Ç–µ–º–∞ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import jwt
import bcrypt
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from fastapi import HTTPException, Depends, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
import os

# üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JWT
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "your-super-secret-jwt-key-change-in-production")
JWT_ALGORITHM = "HS256"
JWT_ACCESS_TOKEN_EXPIRE_HOURS = 24
JWT_REFRESH_TOKEN_EXPIRE_DAYS = 30

# üõ°Ô∏è Security —Å—Ö–µ–º–∞
security = HTTPBearer()

class TokenData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    user_id: int
    email: str
    exp: datetime
    iat: datetime
    token_type: str  # "access" or "refresh"

class AuthService:
    """–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    @staticmethod
    def hash_password(password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é bcrypt"""
        salt = bcrypt.gensalt()
        return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')
    
    @staticmethod
    def verify_password(password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))
    
    @staticmethod
    def create_access_token(user_id: int, email: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞"""
        now = datetime.utcnow()
        expire = now + timedelta(hours=JWT_ACCESS_TOKEN_EXPIRE_HOURS)
        
        payload = {
            "user_id": user_id,
            "email": email,
            "exp": expire,
            "iat": now,
            "token_type": "access"
        }
        
        return jwt.encode(payload, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    
    @staticmethod
    def create_refresh_token(user_id: int, email: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞"""
        now = datetime.utcnow()
        expire = now + timedelta(days=JWT_REFRESH_TOKEN_EXPIRE_DAYS)
        
        payload = {
            "user_id": user_id,
            "email": email,
            "exp": expire,
            "iat": now,
            "token_type": "refresh"
        }
        
        return jwt.encode(payload, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    
    @staticmethod
    def verify_token(token: str) -> TokenData:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        try:
            payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["user_id", "email", "exp", "iat", "token_type"]
            for field in required_fields:
                if field not in payload:
                    raise HTTPException(status_code=401, detail=f"Invalid token: missing {field}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            exp_timestamp = payload["exp"]
            if isinstance(exp_timestamp, (int, float)):
                exp_datetime = datetime.fromtimestamp(exp_timestamp)
            else:
                exp_datetime = datetime.fromisoformat(str(exp_timestamp))
                
            if exp_datetime < datetime.utcnow():
                raise HTTPException(status_code=401, detail="Token expired")
            
            return TokenData(
                user_id=payload["user_id"],
                email=payload["email"],
                exp=exp_datetime,
                iat=datetime.fromtimestamp(payload["iat"]),
                token_type=payload["token_type"]
            )
            
        except jwt.ExpiredSignatureError:
            raise HTTPException(status_code=401, detail="Token expired")
        except jwt.InvalidTokenError:
            raise HTTPException(status_code=401, detail="Invalid token")
        except Exception as e:
            raise HTTPException(status_code=401, detail=f"Token validation error: {str(e)}")
    
    @staticmethod
    def refresh_access_token(refresh_token: str) -> str:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é refresh —Ç–æ–∫–µ–Ω–∞"""
        token_data = AuthService.verify_token(refresh_token)
        
        if token_data.token_type != "refresh":
            raise HTTPException(status_code=401, detail="Invalid token type")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
        return AuthService.create_access_token(token_data.user_id, token_data.email)

# üîí Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> TokenData:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    token = credentials.credentials
    return AuthService.verify_token(token)

async def get_optional_user(request: Request) -> Optional[TokenData]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å None)"""
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        return None
    
    try:
        token = auth_header.split(" ")[1]
        return AuthService.verify_token(token)
    except:
        return None

# üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class InputSanitizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def sanitize_string(value: str, max_length: int = 500) -> str:
        """–ë–∞–∑–æ–≤–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏"""
        if not isinstance(value, str):
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        dangerous_chars = ['<', '>', '"', "'", '&', '%', ';', '(', ')', '+', 'script', 'javascript:', 'data:']
        sanitized = value
        
        for char in dangerous_chars:
            sanitized = sanitized.replace(char, '')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return sanitized[:max_length].strip()
    
    @staticmethod
    def validate_email(email: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
        import re
        email = email.lower().strip()
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        
        if not re.match(email_pattern, email):
            raise HTTPException(status_code=400, detail="Invalid email format")
        
        return email
    
    @staticmethod
    def validate_password(password: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
        if len(password) < 6:
            raise HTTPException(status_code=400, detail="Password must be at least 6 characters long")
        
        if len(password) > 128:
            raise HTTPException(status_code=400, detail="Password too long")
        
        return password

# üîê Rate Limiting (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
from collections import defaultdict
from time import time

class RateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –≤ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.requests = defaultdict(list)
        self.max_requests = 100  # –º–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
        self.time_window = 3600  # –∑–∞ —á–∞—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    
    def is_allowed(self, identifier: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å"""
        now = time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[identifier] = [
            req_time for req_time in self.requests[identifier]
            if now - req_time < self.time_window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[identifier]) >= self.max_requests:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[identifier].append(now)
        return True
    
    def get_remaining_requests(self, identifier: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = time()
        recent_requests = [
            req_time for req_time in self.requests[identifier]
            if now - req_time < self.time_window
        ]
        return max(0, self.max_requests - len(recent_requests))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate limiter
rate_limiter = RateLimiter()

def check_rate_limit(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –ø–æ IP –∞–¥—Ä–µ—Å—É"""
    client_ip = request.client.host
    
    if not rate_limiter.is_allowed(client_ip):
        remaining = rate_limiter.get_remaining_requests(client_ip)
        raise HTTPException(
            status_code=429, 
            detail=f"Rate limit exceeded. Try again later. Remaining: {remaining}"
        )
    
    return True 