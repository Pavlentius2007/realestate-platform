import logging
import logging.handlers
from pathlib import Path
import os
from datetime import datetime
import json


class CustomJSONFormatter(logging.Formatter):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def format(self, record):
        log_entry = {
            'timestamp': datetime.fromtimestamp(record.created).isoformat(),
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'user_id'):
            log_entry['user_id'] = record.user_id
        if hasattr(record, 'ip_address'):
            log_entry['ip_address'] = record.ip_address
        if hasattr(record, 'request_id'):
            log_entry['request_id'] = record.request_id
        if hasattr(record, 'endpoint'):
            log_entry['endpoint'] = record.endpoint
        if hasattr(record, 'method'):
            log_entry['method'] = record.method
        if hasattr(record, 'status_code'):
            log_entry['status_code'] = record.status_code
        if hasattr(record, 'response_time'):
            log_entry['response_time'] = record.response_time
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            log_entry['exception'] = self.formatException(record.exc_info)
            
        return json.dumps(log_entry, ensure_ascii=False, separators=(',', ':'))


class SecurityFilter(logging.Filter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    
    def filter(self, record):
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_keywords = [
            'authentication', 'authorization', 'csrf', 'rate_limit', 
            'login', 'logout', 'register', 'token', 'suspicious',
            'blocked', 'failed', 'unauthorized', 'forbidden'
        ]
        
        message = record.getMessage().lower()
        return any(keyword in message for keyword in security_keywords)


class PerformanceFilter(logging.Filter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def filter(self, record):
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        return (
            hasattr(record, 'response_time') or
            'performance' in record.getMessage().lower() or
            'slow' in record.getMessage().lower() or
            'timeout' in record.getMessage().lower()
        )


def setup_logging(config_name: str = "production"):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        config_name: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (development, production, testing)
    """
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    root_logger.handlers.clear()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
    json_formatter = CustomJSONFormatter()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # === –ö–û–ù–°–û–õ–¨–ù–´–ô HANDLER ===
    console_handler = logging.StreamHandler()
    if config_name == "development":
        console_handler.setLevel(logging.DEBUG)
        console_handler.setFormatter(console_formatter)
    else:
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(json_formatter)
    
    root_logger.addHandler(console_handler)
    
    # === –û–°–ù–û–í–ù–û–ô –§–ê–ô–õ –õ–û–ì–û–í ===
    main_handler = logging.handlers.RotatingFileHandler(
        log_dir / "sianoro.log",
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    main_handler.setLevel(logging.INFO)
    main_handler.setFormatter(json_formatter)
    root_logger.addHandler(main_handler)
    
    # === –§–ê–ô–õ –õ–û–ì–û–í –û–®–ò–ë–û–ö ===
    error_handler = logging.handlers.RotatingFileHandler(
        log_dir / "errors.log",
        maxBytes=10*1024*1024,
        backupCount=10,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(json_formatter)
    root_logger.addHandler(error_handler)
    
    # === –§–ê–ô–õ –õ–û–ì–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
    security_handler = logging.handlers.RotatingFileHandler(
        log_dir / "security.log",
        maxBytes=10*1024*1024,
        backupCount=30,  # –•—Ä–∞–Ω–∏–º –¥–æ–ª—å—à–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
        encoding='utf-8'
    )
    security_handler.setLevel(logging.INFO)
    security_handler.setFormatter(json_formatter)
    security_handler.addFilter(SecurityFilter())
    root_logger.addHandler(security_handler)
    
    # === –§–ê–ô–õ –õ–û–ì–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
    performance_handler = logging.handlers.RotatingFileHandler(
        log_dir / "performance.log",
        maxBytes=10*1024*1024,
        backupCount=7,
        encoding='utf-8'
    )
    performance_handler.setLevel(logging.INFO)
    performance_handler.setFormatter(json_formatter)
    performance_handler.addFilter(PerformanceFilter())
    root_logger.addHandler(performance_handler)
    
    # === –§–ê–ô–õ –õ–û–ì–û–í –î–û–°–¢–£–ü–ê ===
    access_handler = logging.handlers.RotatingFileHandler(
        log_dir / "access.log",
        maxBytes=10*1024*1024,
        backupCount=7,
        encoding='utf-8'
    )
    access_handler.setLevel(logging.INFO)
    access_handler.setFormatter(json_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    access_logger = logging.getLogger("access")
    access_logger.setLevel(logging.INFO)
    access_logger.addHandler(access_handler)
    access_logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ root logger
    
    # === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–û–í –ë–ò–ë–õ–ò–û–¢–ï–ö ===
    
    # Uvicorn
    uvicorn_logger = logging.getLogger("uvicorn")
    uvicorn_logger.setLevel(logging.INFO)
    
    # FastAPI
    fastapi_logger = logging.getLogger("fastapi")
    fastapi_logger.setLevel(logging.INFO)
    
    # SQLAlchemy - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    sqlalchemy_logger = logging.getLogger("sqlalchemy")
    sqlalchemy_logger.setLevel(logging.WARNING)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º verbose –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    logging.getLogger("multipart").setLevel(logging.WARNING)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = logging.getLogger(__name__)
    logger.info(f"üîß –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ({config_name})")
    logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_dir.absolute()}")
    
    return logger


def get_logger(name: str = None):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–º—è –º–æ–¥—É–ª—è)
    
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return logging.getLogger(name or __name__)


def log_request(logger: logging.Logger, request, response=None, start_time=None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        request: FastAPI Request –æ–±—ä–µ–∫—Ç
        response: FastAPI Response –æ–±—ä–µ–∫—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    import time
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
    ip_address = request.client.host if request.client else "unknown"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    user_id = getattr(request.state, 'user_id', None)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    response_time = None
    if start_time:
        response_time = round((time.time() - start_time) * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–¥
    status_code = response.status_code if response else None
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
    extra = {
        'ip_address': ip_address,
        'method': request.method,
        'endpoint': str(request.url),
        'user_agent': request.headers.get('user-agent', ''),
        'referer': request.headers.get('referer', ''),
    }
    
    if user_id:
        extra['user_id'] = user_id
    if status_code:
        extra['status_code'] = status_code
    if response_time:
        extra['response_time'] = response_time
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if status_code and status_code >= 500:
        level = logging.ERROR
    elif status_code and status_code >= 400:
        level = logging.WARNING
    else:
        level = logging.INFO
    
    message = f"{request.method} {request.url.path}"
    if status_code:
        message += f" -> {status_code}"
    if response_time:
        message += f" ({response_time}ms)"
    
    logger.log(level, message, extra=extra)


def log_security_event(logger: logging.Logger, event_type: str, details: dict, request=None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (login, logout, csrf_violation, rate_limit_exceeded, etc.)
        details: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
        request: FastAPI Request –æ–±—ä–µ–∫—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    extra = {
        'event_type': event_type,
        **details
    }
    
    if request:
        extra['ip_address'] = request.client.host if request.client else "unknown"
        extra['user_agent'] = request.headers.get('user-agent', '')
        extra['endpoint'] = str(request.url)
    
    logger.warning(f"Security event: {event_type}", extra=extra)


def log_performance_event(logger: logging.Logger, operation: str, duration: float, details: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    
    extra = {
        'operation': operation,
        'duration': duration,
        'response_time': round(duration * 1000, 2)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    }
    
    if details:
        extra.update(details)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if duration > 5.0:  # –ë–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
        level = logging.ERROR
    elif duration > 1.0:  # –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
        level = logging.WARNING
    else:
        level = logging.INFO
    
    logger.log(level, f"Performance: {operation} took {duration:.2f}s", extra=extra) 